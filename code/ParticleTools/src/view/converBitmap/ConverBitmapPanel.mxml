<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="556" height="346" creationComplete="onCom()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import _Pan3D.core.MathCore;
		
		import _me.Scene_data;
		
		import flash.display3D.Context3D;
		import flash.display3D.Context3DBlendFactor;
		import flash.display3D.Context3DCompareMode;
		import flash.display3D.Context3DProgramType;
		import flash.display3D.Context3DTriangleFace;
		
		import mx.core.UIComponent;
		
		import utils.ParticleManagerTool;
		private var drawUI:UIComponent = new UIComponent;
		
		private var isFirst:Boolean = true;
		/**
		 * 裁剪宽度
		 * 
		 * */
		private var wNum:int;
		/**
		 * 裁剪高度
		 * 
		 * */
		private var hNum:int;
		
		private var bitmap:Bitmap;
		private var bitmapdata:BitmapData;
		
		private var saveObj:Object;
		public function show(container:DisplayObjectContainer):void{
			if(isFirst){
				this.x = 1000;
				this.y = 50;
			}
			container.addChild(drawUI);
			container.addChild(this);
			isFirst = false;
		}
		private function onCom():void{
			drawBg();
			initBitmap();
			changeBounds();
			if(saveObj){
				setAllInfo(saveObj);
			}
		}
		private function initBitmap():void{
			bitmap = new Bitmap;
			//bitmap.blendMode = BlendMode.ADD;
			ui.addChild(bitmap);
		}
		private function onResizeDown():void{
			stage.addEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
			stage.addEventListener(MouseEvent.MOUSE_UP,onMouseUp);
		}
		private function onMouseMove(event:MouseEvent):void{
			this.height = stage.mouseY - this.y;
			this.width = stage.mouseX - this.x;
			if(this.height < 200){
				this.height = 200;
			}
			if(this.width < 550){
				this.width = 550;
			}
			drawBg();
		}
		private function onMouseUp(event:MouseEvent):void{
			stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
			stage.removeEventListener(MouseEvent.MOUSE_UP,onMouseUp);
		}
		private function drawBg():void{
			return;
			ui.graphics.clear();
			ui.graphics.beginFill(0xff0000,1);
			ui.graphics.drawRect(0,0,width-20,height-110);
			ui.graphics.endFill();
		}
		private function close():void{
			if(this.parent){
				this.parent.removeChild(this);
			}
			if(drawUI.parent){
				drawUI.parent.removeChild(drawUI);
			}
		}
		/**
		 * 改变要裁剪的区域
		 * 
		 * */
		private function changeBounds():void{
			wNum = int(wTxt.text);
			hNum = int(hTxt.text);
			drawUI.graphics.clear();
			drawUI.graphics.lineStyle(1,0xff0000);
			drawUI.graphics.drawRect((Scene_data.stageWidth-wNum)/2,(Scene_data.stageHeight-hNum)/2,wNum,hNum);
		}
		/**
		 * 生成的最终的序列
		 * 
		 * */
		private var bitmapdataAry:Vector.<BitmapData> = new Vector.<BitmapData>;
		/**
		 * 帧率
		 * 
		 * */
		private var bmpFrameRate:int;
		/**
		 * 数据更新和渲染
		 * 
		 * */
		private function oneRender():void{
			bitmapdataAry = new Vector.<BitmapData>;
			ParticleManagerTool.getInstance().reset();
			bmpFrameRate = int(rateTxt.text);
			var frameNum:int = int(fTxt.text)/bmpFrameRate;
			onStageResize(wNum,hNum);
			for(var i:int;i<frameNum;i++){//循环刷帧写入数据
				for(var j:int=0;j<bmpFrameRate;j++){
					ParticleManagerTool.getInstance().updateByFrame();
				}
				var bmp:BitmapData = render();
				bitmapdataAry.push(bmp);
			}
			onStageResize(stage.stageWidth,stage.stageHeight);
			flagNum = 0;
			flag = 0;
			this.addEventListener(Event.ENTER_FRAME,onFrame);
		}
		/**
		 * 播放控制
		 * 
		 * */
		private var flag:int;
		private var flagNum:int;
		/**
		 * 刷帧播放
		 * 
		 * */
		private function onFrame(event:Event):void{
			if(flag == bitmapdataAry.length){
				flag = 0;
			}
			if(bitmapdataAry.length){
				bitmap.bitmapData = bitmapdataAry[flag]
			}
			if(flagNum==bmpFrameRate){
				flag++;
				flagNum = 0;
			}
			flagNum++;
		}
		/**
		 * 从GPU渲染bitmapdata
		 * 
		 * */ 
		private function render():BitmapData{
			
			bitmapdata = new BitmapData(wNum,hNum,true,0);
			bitmap.bitmapData = bitmapdata;
			
			Scene_data.drawNum = 0;
			
			var context3D:Context3D=Scene_data.context3D;
		
			MathCore._catch_cam(Scene_data.cam3D, Scene_data.focus3D,Scene_data.shake3D);
			context3D.clear(0, 0, 0, 0);
			
			var _projMatrixNew:Matrix3D = new  Matrix3D;
			_projMatrixNew.appendScale(0.001,0.001,0.0001);
			context3D.setProgramConstantsFromMatrix(Context3DProgramType.VERTEX, 0, _projMatrixNew, true);
			
			context3D.setBlendFactors(Context3DBlendFactor.ONE, Context3DBlendFactor.ZERO);
			context3D.setDepthTest(false,Context3DCompareMode.LESS);
			AppParticleData.particleLevel.upData();
			context3D.drawToBitmapData(bitmapdata);
			
			return bitmapdata;
		}
		/**
		 * 改变渲染窗口大小
		 * 
		 * */
		private function onStageResize(w:int,h:int):void{
			Scene_data.stageWidth = w;
			Scene_data.stageHeight = h;
			
			Scene_data.cam3D.fovw=Scene_data.stageWidth;
			Scene_data.cam3D.fovh=Scene_data.stageHeight;
			
			var context3D:Context3D=Scene_data.context3D;
			context3D.configureBackBuffer(Scene_data.stageWidth, Scene_data.stageHeight,2, true);
		}
		/**
		 * 添加本地背景图片
		 * 
		 * */
		private function loadLocalMap():void{
			var file:File = new File;
			file.addEventListener(Event.SELECT,onLocalSel);
			file.browseForOpen("选择本地图片");
		}
		
		protected function onLocalSel(event:Event):void
		{
			var file:File = event.target as File;
			
			var loader:Loader = new Loader();
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,onLoadCom);
			loader.load(new URLRequest(file.url));
		}
		protected function onLoadCom(event:Event):void{
			var bitmap:Bitmap = event.target.content;
			while(imgUI.numChildren){
				imgUI.removeChildAt(0);
			}
			imgUI.addChild(bitmap);
			
			imgUI.width = bitmap.width;
			imgUI.height = bitmap.height;
		}
		/**
		 * 获取所有数据
		 * 
		 * */
		public function getAllInfo():Object{
			if(!wTxt){
				return null;
			}
			if(!cb.selected){
				return null;
			}
			var obj:Object = new Object;
			obj.width = int(wTxt.text);
			obj.height = int(hTxt.text);
			obj.frameNum = int(fTxt.text);
			obj.frameRate = int(rateTxt.text);
			return obj;
		}
		
		public function setAllInfo(obj:Object):void{
			saveObj = obj;
			if(!wTxt){
				return;
			}
			if(obj){
				cb.selected = true;
			}else{
				cb.selected = false;
				return;
			}
			
			wTxt.text = obj.width;
			hTxt.text = obj.height;
			fTxt.text = obj.frameNum;
			rateTxt.text = obj.frameRate;
		}
		
		
		
	]]>
</fx:Script>
	<mx:Panel width="100%" height="100%"/>
	<mx:Label y="5" left="6" right="46" height="26" fontWeight="bold" mouseDown="startDrag()"
			  mouseUp="stopDrag()" text="粒子转序列图"/>
	<mx:Button right="0" bottom="0" width="8" height="8" mouseDown="onResizeDown()"/>
	<mx:Button y="6" right="10" width="28" label="X" click="close()"/>
	<mx:TextInput id="wTxt" x="48" y="36" width="74" change="changeBounds()" text="200"/>
	<mx:TextInput id="hTxt" x="169" y="36" width="74" change="changeBounds()" text="200"/>
	<mx:TextInput id="fTxt" x="48" y="62" width="74" text="40"/>
	<mx:TextInput id="rateTxt" x="169" y="62" width="74" text="1"/>
	<mx:Label x="135" y="62" text="帧速："/>
	<mx:Label x="14" y="62" text="帧数："/>
	<mx:Label x="136" y="36" text="高："/>
	<mx:Label x="15" y="36" text="宽："/>
	<mx:Button x="386" y="40" label="背景图片" click="loadLocalMap()"/>
	<mx:Button x="299" y="40" label="渲染" click="oneRender()"/>
	<mx:Canvas left="10" right="10" top="100" bottom="10">
		<mx:UIComponent id="imgUI" x="0" y="0" width="0"/>
	</mx:Canvas>
	<mx:UIComponent id="ui" x="10" y="100" mouseDown="ui.startDrag()" mouseUp="ui.stopDrag()"/>
	<mx:CheckBox id="cb" x="299" y="74" label="是否需要转序列图"/>
</mx:Canvas>
