<?xml version="1.0" encoding="utf-8"?>
<frame:BasePanel xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:frame="common.utils.frame.*"
				 creationComplete="creationCompleteHandler(event)"
		   xmlns:s="library://ns.adobe.com/flex/spark"  height="100%"
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%">
	<fx:Declarations>
		<!-- 面板的总容器，显示各种类型不同粒子的面板 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import flash.utils.getTimer;
		
		import mx.events.FlexEvent;
		
		import PanV2.PositionSpriteV2;
		
		import _Pan3D.base.enum.EnumParticleType;
		
		import _me.FpsView;
		import _me.Scene_data;
		private var dic:Object = new Object;
		private var currentView:DynamicAttributePanle;
		private static var _instance:AllAttributePanle;
		private var _positionSprite:PositionSpriteV2;
		
		public static function getInstance():AllAttributePanle{
			if(!_instance){
				_instance = new AllAttributePanle;
			}
			return _instance;
		}
		
		/**
		 * 根据不同的粒子类型，加载不同的面板配置文件
		 * */
		public function showParticle(partype:int):DynamicAttributePanle{
			var t:int = getTimer();
			var type:String;
			switch(partype){
				case EnumParticleType.FACET:
					type = "facet";
					break;
				case EnumParticleType.BALL:
					type = "ball";
					break;
				case EnumParticleType.LOCUS:
					type = "locus";
					break;
				case EnumParticleType.CYLINDER:
					type = "cylinder";
					break;
				case EnumParticleType.MULTIPLE:
					type = "multiple";
					break;
				case EnumParticleType.RING:
					type = "ellipsoid";
					break;
				case EnumParticleType.CROSSFACET:
					type = "crossFacet";
					break;
				case EnumParticleType.FOLLOW:
					type = "followball";
					break;
				case EnumParticleType.MODEL:
					type = "model";
					break;
				case EnumParticleType.LINK:
					type = "facet";
					break;
				case EnumParticleType.MASK:
					type = "maskFacet";
					break;
				case EnumParticleType.FOLLOW_LOCUS:
					type = "followLocous"
					break;
				case EnumParticleType.BONE:
					type = "bone";
					break;
				case EnumParticleType.LOCUS_BALL:
					type = "locusBall";
					break;
				case EnumParticleType.HIGH_BALL:
					type = "highball";
					break;
				case EnumParticleType.HIGH_LOCUS:
					type = "locus";
					break;
				case EnumParticleType.SPECIAL_LOCUS:
					type = "locus";
					break;
				case EnumParticleType.BALL_NEW:
					type = "ballnew";
					break;
				case EnumParticleType.MULTIPLE_NEW:
					type = "multiplenew";
					break;
				case EnumParticleType.BONE_NEW:
					type = "bonenew";
					break;
				case EnumParticleType.MODEL_NEW:
					type = "modelnew";
					break;
				case EnumParticleType.FOLLOW_MUL_LOCUS:
					type = "followMulLocous";
					break;
			}
			if(currentView && currentView.type == type){//如果是当前类型则直接共用
//				currentView.setData(AppData.display3dParticle);
				return currentView;
			}
			
			if(currentView && currentView.parent){//不是当前则移除
				currentView.parent.removeChild(currentView);
			}
			
			if(dic[type]){//从缓存中取出面板
				currentView = dic[type];
			}else{
				currentView = new DynamicAttributePanle;
				currentView.type = type;
				dic[type] = currentView;
			}
			this.addChild(currentView);
//			currentView.setData(AppData.display3dParticle);
			return currentView;
		}
		
		override public function onSize(event:Event= null):void
		{
			super.onSize(event)
			if(_positionSprite){
				_positionSprite.x=this.width;
				_positionSprite.y=this.height-150
					
				_fpsView.x=this.width+10
				_fpsView.y=245
			}
		
		}
		
		public function removeAll():void{
			this.removeAllChildren();
			currentView = null;
		}
		
		
	
		private var _fpsView:FpsView
		protected function creationCompleteHandler(event:FlexEvent):void
		{
			_positionSprite=new PositionSpriteV2()

			_fpsView=new FpsView(this.stage)

		   Scene_data.stage.addChild(_positionSprite)
				
			this.onSize(null)
			
		}
		
	]]>
</fx:Script>
</frame:BasePanel>
