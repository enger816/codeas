<?xml version="1.0" encoding="utf-8"?>
<frame:BasePanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" addedToStage="onCom()" creationComplete="onCreatCom()"
		   xmlns:mx="library://ns.adobe.com/flex/mx"  xmlns:component="view.component.*" xmlns:frame="common.utils.frame.*" xmlns:txt="common.utils.ui.txt.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import flash.display3D.Program3D;
		import flash.utils.setTimeout;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.core.UIComponent;
		import mx.events.CloseEvent;
		
		import _Pan3D.particle.ctrl.ParticleManager;
		import _Pan3D.program.Program3DManager;
		import _Pan3D.program.shaders.Md5Shader;
		
		import _me.FpsView;
		import _me.Scene_data;
		
		import air.update.ApplicationUpdaterUI;
		import air.update.events.UpdateEvent;
		
		import common.AppData;
		import common.GameUIInstance;
		
		import modules.expres.ExpResFunVo;
		import modules.expres.ExpResModel;
		import modules.expres.ExpResPanel;
		import modules.hierarchy.h5.MakeResFileList;
		import modules.scene.sceneSave.FilePathManager;
		
		import renderLevel.BoneKeyControl;
		import renderLevel.Display3DMovieLocal;
		
		import scenesave.BoneAnimSaveSceneModel;
		
		import utils.FileConfigUtils;
		
		import view.action.ActionPanel;
		import view.animPosChange.AnimPosChangePanel;
		import view.bone.BonePanel;
		import view.byteFile.FileToBytePanel;
		import view.config.ConfigPanle;
		import view.controlCenter.ControlCenterPanle;
		import view.hang.HangPanel;
		import view.light.LightPanle;
		import view.map.MapListPanle;
		import view.mesh.MeshPanel;
		import view.mesh.RoleExpNew;
		import view.meshToAnim.MeshToAnimPanel;
		import view.normal.NormalPanle;
		import view.prop.ScenePropPanle;
		import view.ride.RidePanel;
		import view.ridepos.RidePosPanel;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		private function onMenuClick(event:Event):void{
			var type:int = event.currentTarget.data;
			
			this.SelectId(type)
			
		}
		public function SelectId(typeId:uint):void
			
		{
			switch(typeId){
				case 0:
					clear();
					break;
				case 1:
					open();
					break;
				case 2:
					save();
					break;
				case 22://saveas
					save(true);
					break;
				case 3:
					MeshPanel.getInstance().showUI(this.parent);
					break;
				case 4:
					ActionPanel.getInstance().showUI(this.parent);
					break;
				case 5:
					ControlCenterPanle.getInstance().showUI(this.parent);
					break;
				case 6:
					AppDataBone.role.addPrototype();
					break;
				case 7:
					AppDataBone.role.showMesh();
					break;
				case 8:
					//BonePanel.getInstance().showUI(this.parent);
					break;
				case 9:
					HangPanel.getInstance().showUI(this.parent);
					break;
				case 10:
					closeHandler();
					break;
				case 11:
					expSave();
					break;
				case 12:
					RidePosPanel.getInstance().showUI(this.parent);
					break;
				case 13:
					showSetBg();
					break;
				case 14:
					ConfigPanle.getInatane().showUI(this.parent);
					break;
				case 15:
					//new MeshSortUtils().sort();
					break;
				case 16:
					//BoundPanel.getInstance().show(this.parent);
					updataSoftWare();
					break;
				case 17:
					converFile();
					break;
				case 18:
					showMeshToAnim();
					
				case 19:
					ControlCenterPanle.getInstance().expSkill();
					break;
				case 20:
					ExpResModel.getInstance().changeTbData()
					break;
				case 23:
					trace("工程另存为")
					BoneAnimSaveSceneModel.getInstance().saveScene(lastZZWurl)
					break;
				case 50:
					
					BoneAnimApp(GameUIInstance.application).showBaseView()
					
					break;
				case 51:
					
					trace("网格控制")
					AppDataBone.sceneLevel.drawLevel.lineGrldSprite.visible=!AppDataBone.sceneLevel.drawLevel.lineGrldSprite.visible
					
					break;
			}
		
		}
		

		
		private function onCom():void{
			inits();
			
			//MeshPanel.getInstance().showUI(GameUIInstance.uiContainer);
			//ActionPanel.getInstance().show(GameUIInstance.uiContainer);
			//BonePanel.getInstance().show(GameUIInstance.uiContainer);
			//HangPanel.getInstance().show(this.parent);
			//RidePanel.getInstance().show(this.parent);
			//RidePosPanel.getInstance().show(GameUIInstance.uiContainer);
			//ControlCenterPanle.getInstance().show(GameUIInstance.uiContainer);
			//ConfigPanle.getInatane().show(GameUIInstance.uiContainer);
			//BoundPanel.getInstance().show(this.parent);
			
		
		
			
		}
		
		private function onCreatCom():void{
			setTimeout(autoOpen,1000);
			
			var fpsMcUi:UIComponent=new UIComponent;
			this.addElement(fpsMcUi);
			new FpsView(fpsMcUi,0,35);
		}
		
		public function showSetBg():void{
			if(!_mapListView){
				_mapListView = new MapListPanle;
			}
			this.parent.addChild(_mapListView);
			
			_mapListView.x = (this.parent.width - _mapListView.width)/2;
			_mapListView.y = (this.parent.height - _mapListView.height)/2;
		}
		
		private function inits():void{
			var file:File = new File(File.documentsDirectory.url + "/md5Config.cfg");
			if(file.exists){
				var fs:FileStream = new FileStream;
				fs.open(file,FileMode.READ);
				var obj:Object = fs.readObject();
			
			
				fs.close();
				Scene_data.fileRoot = obj.fileRoot;
				AppData.expSpaceUrl = obj.expSpaceUrl;
				Scene_data.particleRoot = Scene_data.fileRoot
				Scene_data.md5Root = Scene_data.fileRoot;
				AppData.workSpaceUrl=Scene_data.fileRoot
				camDis.text=String(Scene_data.cam3D.distance);
				camWalk.text=String(BoneKeyControl.speedNum)
		
					
			}else{
				Alert.show("工作空间未配置","提示",1,null,closeHandler);
			}
		}
		private var rootSelPanle:RootSelPanle = new RootSelPanle;
		private function closeHandler(event:CloseEvent=null):void{
			this.parent.addChild(rootSelPanle);
			
			return;
			var file:File = new File;
			file.browseForDirectory("选择工作空间");
			file.addEventListener(Event.SELECT,onSel2);
		}
		
		protected function onSel2(event:Event):void{
			var str:String = event.target.url;
			var endCode:String = str.charAt(str.length-1);
			if(endCode != "/"){
				str += "/";
			}
			var file:File = new File(File.documentsDirectory.url + "/md5Config.cfg");
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.WRITE);
			fs.writeObject(str);
			fs.close();
			Scene_data.fileRoot = Scene_data.particleRoot = Scene_data.md5Root = str;
		}
		
		private function save($isSaveAs:Boolean=false):void{

			var file:File = new File;
			if(!$isSaveAs&&lastZZWurl ){
				file = new File(lastZZWurl);
				if(file.exists){
					file.addEventListener(Event.SELECT,onSel);
					file.dispatchEvent(new Event(Event.SELECT));
				}

			}else{
			
				file.browseForSave("保存文件");
				file.addEventListener(Event.SELECT,onSel);
			}
	
		
		}
		private function onSel(event:Event):void{
			var mesh:Object = MeshPanel.getInstance().getAllInfo();
			var bone:Object = ActionPanel.getInstance().getAllInfo();
			var hang:Object = HangPanel.getInstance().getAllInfo();
			var timeline:Object = ControlCenterPanle.getInstance().getAllInfo();
			//var ride:Object = RidePanel.getInstance().getAllInfo();
			var ride:Object = RidePosPanel.getInstance().getAllInfo();
			var socket:Object = BonePanel.getInstance().getAllInfo();
			
			var obj:Object = new Object;
			obj.mesh = mesh;
			obj.bone = bone;
			obj.hang = hang;
			obj.timeline = timeline;
			obj.ride = ride;
			obj.socket = socket;
			
			var file:File = event.target as File;
			if(!(file.extension == "zzw")){
				file = new File(file.nativePath + ".zzw");
			}
			
			obj.scale = AppDataBone.role.fileScale;
			obj.tittleHeight = AppDataBone.role.tittleHeight;
			obj.hitBoxPoint = AppDataBone.role.hitBoxPoint;
			
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.WRITE);
			fs.writeObject(obj);
			fs.close();
			
			Alert.show("保存完存")
			//AppData.appTitle = "粒子编辑器 -" + file.name;
		}
		private var lastFileOpenUrl:String;
		private var _mapListView:MapListPanle;
		private function open():void{
//			autoOpen();
//			return;
			if(!lastFileOpenUrl){
				lastFileOpenUrl = FileConfigUtils.readConfig().zzwUrl;
			}
			var file:File = new File(lastFileOpenUrl);
			file.browseForOpen("打开",[new FileFilter("zzw文件","*.zzw")]);
			file.addEventListener(Event.SELECT,onOpenSel);
		}
		private function autoOpen():void{
			//return;
			var obj:Object = FileConfigUtils.readConfig();
			var url:String = obj.openFileUrl;
			if(url){
				var file:File = new File(url);
				if(file.exists){
					file.addEventListener(Event.SELECT,onOpenSel);
					file.dispatchEvent(new Event(Event.SELECT));
				}
			}
			AppDataBone.sceneLevel.drawLevel.setBackUrl(AppData.workSpaceUrl+FilePathManager.getInstance().getPathByUid("sceneBackBaseUrl"))
			
		}
		
		private var lastZZWurl:String
		private function onOpenSel(event:Event):void{
			clear();
			var file:File = event.target as File;
			
			
			AppData.appTitle="BoneAnimApp--"+decodeURI(file.url);
				
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.READ);
			var obj:Object = fs.readObject();
			fs.close();
			
			
			
			
			MeshPanel.getInstance().setAllInfo(obj.mesh);
			HangPanel.getInstance().fileInfo = obj.hang;
			//ControlCenterPanle.getInstance().setAllInfo(obj.timeline);
			ControlCenterPanle.getInstance().preSetData = obj.timeline;
			RidePosPanel.getInstance().setAllInfo(obj.ride);
			ActionPanel.getInstance().setAllInfo(obj.bone);
			BonePanel.getInstance().setAllInfo(obj.socket);
			
			AppDataBone.appTitle = "动作编辑器 -" + file.name;
			
			lastFileOpenUrl = file.parent.url;
			FileConfigUtils.writeConfig("zzwUrl",lastFileOpenUrl);
			FileConfigUtils.writeConfig("openFileUrl",file.url);
			
			
			lastZZWurl=file.url
			
			if(obj.hasOwnProperty("scale")){
				AppDataBone.fileScale = obj.scale;
			}else{
				AppDataBone.fileScale = 1;
			}
			if(obj.hasOwnProperty("tittleHeight")){
				AppDataBone.tittleHeight = obj.tittleHeight;
			}else{
				AppDataBone.tittleHeight = 0;
			}
			if(obj.hasOwnProperty("hitBoxPoint")){
				AppDataBone.hitBoxPoint = new Point(obj.hitBoxPoint.x,obj.hitBoxPoint.y);
			}else{
				AppDataBone.hitBoxPoint = new Point(10,10)
			}
			AppDataBone.role.fileScale = AppDataBone.fileScale;
			AppDataBone.role.tittleHeight = AppDataBone.tittleHeight;
			AppDataBone.role.hitBoxPoint = AppDataBone.hitBoxPoint;
			AppDataBone.role.updataPos();
			
			ScenePropPanle.getInstance().refreshView();
			
		}
		
		
		private function clear():void{
			ParticleManager.getInstance().removeAllParticle();
			RidePanel.getInstance().removeRide();
			AppDataBone.role.removeRender();
			
			MeshPanel.getInstance().clear();
			ActionPanel.getInstance().clear();
			ControlCenterPanle.getInstance().clear();
			RidePosPanel.getInstance().clear();
			BonePanel.getInstance().clear();
			
			var role:Display3DMovieLocal = new Display3DMovieLocal(Scene_data.context3D);
			AppDataBone.roleContanier.addChild(role);
			var tmpeProgram3d:Program3D = Program3DManager.getInstance().getProgram(Md5Shader.MD5SHADER);
			role.setProgram3D(tmpeProgram3d);
			AppDataBone.role = role;
			
			lastZZWurl=null
			
		}
		
		private function expSave():void{
			
			var $tabelItemStr:Array=["tb_creature#avatar,name,id"]
			var directory:File = File.applicationDirectory; 
			var $configFile:File=new File(directory.nativePath+"/config.txt");
			if($configFile.exists){
				var fs:FileStream = new FileStream;
				fs.open($configFile,FileMode.READ);
				var $str:String = fs.readUTFBytes(fs.bytesAvailable)
				fs.close();
				var $item:Object=JSON.parse($str);
				if($item.role&&$item.role){
					$tabelItemStr=$item.role
				}
			}
			if(ExpResModel.expArpg&&true){
				ExpResPanel.initExpPanel(selectBackFun,$tabelItemStr);
			}else{
				var file:File =new File(FilePathManager.getInstance().getPathByUid("expToH5"));
				file.browseForSave("保存文件");
				file.addEventListener(Event.SELECT,selectExpFile);
			}


		}
		private function selectExpFile(event:Event):void
		{
			var file:File = event.target as File;
			onExpSel(file)
		}
		private var isUi:Boolean=false
		private function selectBackFun($obj:ExpResFunVo):void
		{
           this.isUi=$obj.isUi
		   var $name:String=  $obj.id
		

			var $file:File=new File(AppData.expSpaceUrl+"/"+$name);
			onExpSel($file);
		}
		
		
		private function onExpSel(file:File):void{
		
			
			var mesh:ArrayCollection = MeshPanel.getInstance().getAllInfo() as ArrayCollection;
			var meshAry:Array = meshFilter(mesh);
			var bone:Object = ActionPanel.getInstance().getAllInfo();

			var meshDic:Object = AppDataBone.role.getMeshDic();
			var objDic:Dictionary = AppDataBone.role.getObjDic();
			var particleDic:Object = AppDataBone.role.getParticleDic();
			var socketDic:Object = AppDataBone.role.getSocketDic();
			
			//var byte:ByteArray = new MeshExpNew().exp(meshAry,meshDic,objDic,particleDic,socketDic,file.parent.url);
			
			var fileName:String = file.name.replace(file.type,"");
			
			
			var rootUrl:String=file.parent.url
			FilePathManager.getInstance().setPathByUid("expToH5",rootUrl)
			
			if(!(file.extension == "txt")){
				file = new File(file.nativePath + ".txt");
			}
			var file1Url:String = file.parent.url + "/role/" + fileName + ".txt";
			if(this.isUi){
				file1Url = file.parent.url + "/role/ui/" + fileName + ".txt";
			}
			var file2Url:String = file.parent.url + "/role/" + fileName + "_base.txt"
				
				
			new RoleExpNew().exp(this.isUi,meshAry,meshDic,objDic,particleDic,socketDic,rootUrl,fileName,true,aFun)
		
			function aFun($byte:ByteArray):void
			{
				var fs:FileStream = new FileStream;
				file = new File(file1Url);
				fs.open(file,FileMode.WRITE);
				fs.writeBytes($byte);
				fs.close();
				
				saveBaseFile()
			}
			
			
			function saveBaseFile():void
			{
				new RoleExpNew().exp(this.isUi,meshAry,meshDic,objDic,particleDic,socketDic,rootUrl,fileName+"_base",false,bFun)
			}
			
			function bFun($byte:ByteArray):void
			{
				
				var fs:FileStream = new FileStream;
				file = new File(file2Url);
				fs.open(file,FileMode.WRITE);
				
				fs.writeBytes($byte);
				fs.close();
				
				MakeResFileList.getInstance().pushUrl(file1Url);
				MakeResFileList.getInstance().pushUrl(file2Url);
				MakeResFileList.getInstance().saveFileListToH5(rootUrl+"/","role",fileName);
				
				
				
			}
		
		}
		
		private function meshFilter(sourceAry:ArrayCollection):Array{
			var ary:Array = new Array;
			for(var i:int;i<sourceAry.length;i++){
				var children:ArrayCollection = sourceAry[i].children;
				for(var j:int=0;j<children.length;j++){
					if(children[j].check){
						ary.push(children[j]);
					}
				}
			}
			return ary;
		}
		
		protected function updataSoftWare():void
		{
			var oldid:String = "<id>BoneAnimApp</id>";
			var reg:RegExp = /<id>.*<\/id>/;
			var f:File =new File(File.applicationDirectory.resolvePath(
				"META-INF/AIR/application.xml").nativePath);
			if(!f.exists){
				return;
			}
			var fs:FileStream = new FileStream();  
			fs.open(f,FileMode.READ);      
			var str:String = new String(fs.readUTFBytes(fs.bytesAvailable));
			str = str.replace(reg,oldid);  
			fs.open(f,FileMode.WRITE);
			fs.writeUTFBytes(str);
			fs.close();
			
			checkForUpdate();
		}
		
		/** 检查程序版本更新 */
		private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
		private function checkForUpdate():void {   
			appUpdater.updateURL = "http://192.168.8.142/boneApp/update.xml";   
			appUpdater.isCheckForUpdateVisible = false;
			appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);  
			appUpdater.addEventListener(ErrorEvent.ERROR, onError);  
			appUpdater.initialize();
		}     
		private function onError(event:ErrorEvent):void {   
			Alert.show(event.toString());   
		}   
		private function onUpdate(event:UpdateEvent):void {   
			appUpdater.checkNow();
		}
		private var fileToBytePanel:FileToBytePanel = new FileToBytePanel;
		private function converFile():void{
			fileToBytePanel.show(this.parent);
			
		}
		private var meshAnimPanel:MeshToAnimPanel = new MeshToAnimPanel;
		private function showMeshToAnim():void{
			meshAnimPanel.show(this.parent);
		}
		
		private var animPosChangePanel:AnimPosChangePanel = new AnimPosChangePanel;
		private function showAnimPosChange():void{
			animPosChangePanel.show(this.parent);
		}
		
		private var lightPanle:LightPanle = new LightPanle;
		private function showLight():void{
			lightPanle.show(this.parent);
		}
		
		private var normalPanle:NormalPanle = new NormalPanle;
		private function showNormal():void{
			//normalPanle.show(this.parent);
			
			
			ControlCenterPanle.getInstance().expSkill();
		}
		private function changeCamDis(value:Number):void
		{
			Scene_data.cam3D.distance=value;
		}
		private function changeCamWalk(value:Number):void
		{
			BoneKeyControl.speedNum=value;
		}
		
	]]>
</fx:Script>
	<mx:Canvas backgroundColor="#585858" width="100%" height="20">
		<component:ImageButton source="style/btn/new.png" toolTip="新建" data="0" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/open.png" toolTip="打开" x="30" data="1" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/save.png" toolTip="保存" x="60" data="2" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/mesh.png" toolTip="皮肤管理" x="90" data="3" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/action.png" toolTip="动作管理" x="120" data="4" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/edit.png" toolTip="编辑面板" x="150" data="5" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/showbone.png" toolTip="显示骨架" x="180" data="6" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/showMesh.png" toolTip="隐藏/显示mesh" x="210" data="7" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/bone.png" toolTip="骨骼管理" x="240" data="8" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/hang.png" toolTip="悬挂管理" x="270" data="9" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/urlSet.png" toolTip="路径设定" x="300" data="10" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/exp.png" toolTip="导出人物+动画" x="330" data="11" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/ride.png" toolTip="坐骑" x="360" data="12" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/setBg.png" toolTip="更换背景" x="390" data="13" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/setting.png" toolTip="设置" x="420" data="14" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/preset.png" toolTip="导出预处理" x="450" data="15" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/byteFile.png" toolTip="文件压缩转换" x="480" data="17" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/mesh2anim.png" toolTip="mesh和anim对应" x="510" data="18" click="onMenuClick(event)"/>
		<component:ImageButton source="style/btn/posChange.png" toolTip="位置剥离" x="540" data="18" click="showAnimPosChange()"/>
		<component:ImageButton source="style/btn/light.png" toolTip="流光" x="570" data="18" click="showLight()"/>
		<component:ImageButton source="style/btn/normal.png" toolTip="法线" x="600" data="18" click="showNormal()"/>
		<component:ImageButton source="style/btn/updateSortWare.png" toolTip="软件更新" right="30" data="16" click="onMenuClick(event)"/>
		
		<mx:Label right="30" color="#FF0000" fontWeight="bold" text="{AppDataBone.projectName}"/>
		<txt:TextCtrlInput id ="camDis" x="650" maxNum="2000" minNum="0" step="1" center="true" label="距离" width="100" height="20" changFun="changeCamDis" />
		<txt:TextCtrlInput id ="camWalk" x="750" maxNum="100" minNum="0" step="0.1" center="true" label="步长" width="100" height="20" changFun="changeCamWalk" />
		
	</mx:Canvas>
</frame:BasePanel>
