<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" backgroundColor="#404040"
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="1060" height="100" creationComplete="init(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import mx.core.UIComponent;
		import mx.events.AIREvent;
		import mx.events.FlexEvent;
		
		import spark.components.Window;
		
		import _Pan3D.base.ObjectBone;
		import _Pan3D.core.Quaternion;
		import _Pan3D.role.AnimDataManager;
		
		import _me.Scene_data;
		
		import utils.FileConfigUtils;
		
		import view.bounds.BoundPanel;
		import view.nameEdit.NamePosPanle;
		private static var instance:FrameEditPanle;
		private var isFirst:Boolean = true;

		private var selectFrameView:FrameView;
		private var frameAry:Vector.<FrameView>;

		private var playhead:Shape;
		private var _frameNum:int;
		private var _info:Object;
		
		private var namePosPanle:NamePosPanle = new NamePosPanle;
		public static function getInstance():FrameEditPanle{
			if(!instance){
				instance = new FrameEditPanle;
			}
			return instance;
		}
		/**
		 * 添加到舞台显示
		 * @param container 父容器
		 * @param num 帧数
		 * @param info 骨骼信息
		 * 
		 */
		public function show(container:DisplayObjectContainer,num:int,info:Object):void{
			this.setFocus();
			_frameNum = num;
			
			_info = info;
			setFrameNum(num);
			
			BoundPanel.getInstance().close();
			
			showWin();
			
			if(namePosPanle.parent){
				namePosPanle.show(this.parent,_info);
			}
		}
	
		private var _win:Window
		private function showWin():void{
			
			if(_win){
				_win.close()
			}
			var $win:Window = new Window;
			$win.transparent=false;
			$win.type=NativeWindowType.UTILITY;
			$win.systemChrome=NativeWindowSystemChrome.STANDARD;
			$win.width= 1060;
			$win.height= 100;
			$win.alwaysInFront=true;
			$win.title = "编辑帧";
			
			$win.resizable=true
			$win.showStatusBar = false;
			
			
			$win.addElement(this);
			
			$win.addEventListener(AIREvent.WINDOW_COMPLETE,onWinCom)
			$win.open(true);
			
			$win.addEventListener(KeyboardEvent.KEY_DOWN,onKey);
			_win=$win;
		}
		
		protected function onWinCom(event:AIREvent):void
		{
			Window(event.target).nativeWindow.x=Scene_data.stage.nativeWindow.x+Scene_data.stage.stageWidth/2-Window(event.target).nativeWindow.width/2;
			Window(event.target).nativeWindow.y=Scene_data.stage.nativeWindow.y+Scene_data.stage.stageHeight/2-Window(event.target).nativeWindow.height/2;
			
		}
		
		public function mouseUpDrag():void{
			this.stopDrag();
			FileConfigUtils.writeConfig("frameEditPanlePos",this.x + "|" + this.y);
		}
		/**
		 * 设置帧数 清理舞台显示 将代表帧数的显示块添加
		 * 将已经剔除的帧显示
		 * 将循环帧显示
		 * @param num 帧数
		 * */
		private function setFrameNum(num:int):void{
			if(!ui){
				return;
			}
			var baseW:Number = 8;
			
			while(ui.numChildren){
				ui.removeChildAt(0);
			}
			frameAry = new Vector.<FrameView>;
			var hasInterAry:Array = _info.interAry;//获取已经进行剔除操作的帧数
			for(var i:int;i<num;i++){
				var frameView:FrameView = new FrameView;
				ui.addChild(frameView);
				frameView.x = i*baseW*2;
				frameView.frameNum = i;
				if(hasInterAry){
					if(hasInterAry.indexOf(i) != -1){
						frameView.isInter = true;
					}
				}
				//frameView.select = Boolean(i%2);
				frameView.addEventListener(MouseEvent.CLICK,onFrameClick);
				frameAry.push(frameView);
			}
			if(_info.inLoop){
				isinLoop.selected = true;
				loopTxt.text  = _info.inLoop;
			}else{
				isinLoop.selected = false;
				loopTxt.text  = "";
			}
//			for(var key:String in _info){
//				trace("public var " + key + ":")
//			}
			interAll();
		}
		/**
		 * 第一次初始化组件
		 * */
		protected function init(event:FlexEvent):void{
			setFrameNum(_frameNum);
			initPlayHead();
			
		}
		/**
		 * 选择某一帧时 跳转到这一帧同时播放暂停
		 * */
		protected function onFrameClick(event:MouseEvent):void{
			if(selectFrameView)
				selectFrameView.select = false;
			selectFrameView = event.target as FrameView;
			selectFrameView.select = true;
			
			//playhead.x = selectFrameView.x;
			AppDataBone.role.pause = true;
			AppDataBone.role.gotoAndStop(selectFrameView.frameNum);
			
			this.setFocus();
		}
		/**
		 * 初始化播放头
		 * */
		private function initPlayHead():void{
			playhead = new Shape();
			playhead.graphics.lineStyle(1,0xCC0000);
			playhead.graphics.beginFill(0xCC0000,0.5);
			playhead.graphics.drawRect(0,0,8,20);
			playhead.graphics.endFill();
			playhead.graphics.lineStyle(1,0xCC0000);
			playhead.graphics.moveTo(8/2,20);
			playhead.graphics.lineTo(8/2,50);
			headUI.addChild(playhead);
		}
		/**
		 * 帧更新，播放头滚动
		 * */
		public function update():void{
			if(playhead)
				playhead.x = AppDataBone.role.curentFrame * 8 * 2;
		}
		/**
		 * 还存在的帧数列表（未被剔除的帧数）
		 * */
		private var frameNumList:Array = new Array;
		/**
		 * 要添加到文件中的字符串
		 * */
		private var saveAllStr:String;
		
		/**
		 * 按键操作，向左·上一帧，向右·下一帧，向上·添加帧，向下·剔除帧
		 * */
		protected function onKey(event:KeyboardEvent):void{

			if(event.keyCode == 37){//left
				AppDataBone.role.perFrame();
			}else if(event.keyCode == 39){//right
				AppDataBone.role.nextFrame();
			}else if(event.keyCode == 38){//add
				selectFrameView.isInter = false;
				interAll();
			}else if(event.keyCode == 40){//remove
				selectFrameView.isInter = true;
				interAll();
			}
		}
		/**
		 * 剔帧后的补帧插值操作
		 * */
		private function interAll():void{
			frameNumList.length = 0;//所有的帧数
			for(var i:int;i<frameAry.length;i++){
				if(!frameAry[i].isInter){
					frameNumList.push(frameAry[i].frameNum);
				}
			}
			var ary:Array = interList();
			setFrameToMatrix(ary);//将骨骼对象转换成矩阵最终输出
			AppDataBone.role.addAnimLocal(_info.fileName,ary);
			if(selectFrameView)
				AppDataBone.role.gotoAndStop(selectFrameView.frameNum);
			realTimeSave();
		}
		/**
		 * 插值函数
		 * */
		private function interList():Array{
			var ary:Array = cloneAction(_info.source);//把原来的骨骼数组全部克隆

			for(var i:int=1;i<frameNumList.length;i++){
				var inter:int = (frameNumList[i] - frameNumList[i-1]);
				if(inter > 1){//如果两帧之间有间隔则需要插值
					var dis:Number = 1/inter;//插值步进
					for(var j:int=1;j<inter;j++){
						var newary:Array = interpolaFrame(ary[frameNumList[i-1]],ary[frameNumList[i]],j*dis);
						ary[frameNumList[i-1] + j] = newary;
					}
				}
			}
			return ary;
		}
		/**
		 * 动作克隆
		 * */
		private function cloneAction(sourceAry:Array):Array{
			var resultAry:Array = new Array;
			for(var i:int;i<sourceAry.length;i++){
				var sourceTwo:Array = sourceAry[i];
				resultAry.push(new Array);
				for(var j:int=0;j<sourceTwo.length;j++){
					resultAry[i].push(sourceTwo[j].clone());
				}
			}
			return resultAry;
		}
		/**
		 * 两帧之间的插值
		 * @param ary1 第一帧的骨骼
		 * @param ary2 第二帧的骨骼
		 * @param proportion 插值比例
		 * @return 插值帧
		 * */
		private function interpolaFrame(ary1:Array,ary2:Array,proportion:Number):Array{
			var ary:Array = new Array;
			for(var i:int;i<ary1.length;i++){
				ary.push(interpolaBone(ary1[i],ary2[i],proportion));
			}
			return ary;
		}
		/**
		 * 骨骼之间的插值
		 * @param one 第一个骨骼
		 * @param two 第二个骨骼
		 * @param proportion 插值比例
		 * @return 插值后的骨骼
		 * */
		private function interpolaBone(one:ObjectBone,two:ObjectBone,proportion:Number):ObjectBone{
			var q1:Quaternion = new Quaternion(one.qx,one.qy,one.qz);
			q1.w= getW(q1.x,q1.y,q1.z);
			var q2:Quaternion = new Quaternion(two.qx,two.qy,two.qz);
			q2.w= getW(q2.x,q2.y,q2.z);
			
			var resultQ:Quaternion = new Quaternion;
			resultQ.slerp(q1,q2,proportion);
			
			var newBone:ObjectBone = new ObjectBone();
			newBone.father = one.father;
			newBone.name = one.name;
			newBone.qx = resultQ.x;
			newBone.qy = resultQ.y;
			newBone.qz = resultQ.z;
			
			newBone.tx = one.tx * proportion + two.tx * (1-proportion);
			newBone.ty = one.ty * proportion + two.ty * (1-proportion);
			newBone.tz = one.tz * proportion + two.tz * (1-proportion);
			
			return newBone;
		}
		/**
		 * 骨骼对象转矩阵
		 * @param frameAry 骨骼序列
		 * */
		private function setFrameToMatrix(frameAry:Array):void{
			AnimDataManager.getInstance().setFrameToMatrix(frameAry);
			return 
			for(var j:int=0;j<frameAry.length;j++){
				var boneAry:Array = frameAry[j];
				
				var Q0:Quaternion=new Quaternion();
				var Q1:Quaternion=new Quaternion();
				var OldQ:Quaternion=new Quaternion();
				var OldM:Matrix3D=new Matrix3D();
				var newM:Matrix3D=new Matrix3D();
				var tempM:Matrix3D=new Matrix3D;
				var tempObj:ObjectBone=new ObjectBone;
				
				for(var i:int=0;i<boneAry.length;i++){
					
					var _M1:Matrix3D=new Matrix3D;
					
					var xyzfarme0:ObjectBone= boneAry[i];
					Q0=new Quaternion(xyzfarme0.qx,xyzfarme0.qy,xyzfarme0.qz);
					Q0.w= getW(Q0.x,Q0.y,Q0.z);
					var sonBone:ObjectBone=xyzfarme0;
					
					if(xyzfarme0.father==-1){
						OldQ=new Quaternion(xyzfarme0.qx,xyzfarme0.qy,xyzfarme0.qz);
						OldQ.w= getW(OldQ.x,OldQ.y,OldQ.z);
						newM=OldQ.toMatrix3D();
						newM.appendTranslation(xyzfarme0.tx,xyzfarme0.ty,xyzfarme0.tz);
						newM.appendRotation(-90,Vector3D.X_AXIS);
						var fatherQ:Quaternion = new Quaternion();
						fatherQ.fromMatrix(newM);
						
						xyzfarme0.tx=newM.position.x;
						xyzfarme0.ty=newM.position.y;
						xyzfarme0.tz=newM.position.z;
						xyzfarme0.tw=newM.position.w;
						
						xyzfarme0.qx=fatherQ.x;
						xyzfarme0.qy=fatherQ.y;
						xyzfarme0.qz=fatherQ.z;
						xyzfarme0.qw=fatherQ.w;
						newM.appendScale(-1,1,1);
						xyzfarme0.matrix = newM;
						
					}else {
						var fatherBone:ObjectBone=boneAry[xyzfarme0.father];
						OldQ=new Quaternion(fatherBone.qx,fatherBone.qy,fatherBone.qz,fatherBone.qw);
						OldM=OldQ.toMatrix3D();
						OldM.appendTranslation(fatherBone.tx,fatherBone.ty,fatherBone.tz);
						var  tempV:Vector3D=OldM.transformVector(new Vector3D(sonBone.tx,sonBone.ty,sonBone.tz));
						_M1.appendTranslation(tempV.x,tempV.y,tempV.z);
						
						Q1.multiply(OldQ,Q0);
						newM=Q1.toMatrix3D();
						newM.append(_M1);
						tempM=newM;
						
						xyzfarme0.qx=Q1.x;
						xyzfarme0.qy=Q1.y;
						xyzfarme0.qz=Q1.z;
						xyzfarme0.qw=Q1.w;
						
						xyzfarme0.tx=tempV.x;
						xyzfarme0.ty=tempV.y;
						xyzfarme0.tz=tempV.z;
						xyzfarme0.tw=tempV.w;
						
						//tempM.appendScale(-1,1,1);
						xyzfarme0.matrix = tempM;
						
					}
					//context.setProgramConstantsFromMatrix(Context3DProgramType.VERTEX, 12+i*4,  tempM, true);
				}
			}
		}
		
		private function getW(x:Number,y:Number,z:Number):Number{
			var t:Number = 1-(x*x + y*y + z*z);
			if(t<0){
				t=0
			}else{
				t = -Math.sqrt(t);
			}
			return t;
		}
		/**
		 * 直接剔除一般帧数
		 * */
		private function delInter():void{
			for(var i:int=1;i<frameAry.length-1;i++){
				if(i%2 == 1){
					frameAry[i].isInter = true;
				}
			}
			interAll();
			this.setFocus();
		}
		/**
		 * 重置
		 * */
		private function reset():void{
			for(var i:int=1;i<frameAry.length-1;i++){
				frameAry[i].isInter = false;
			}
			interAll();
			this.setFocus();
		}
		
		private function cloneSave():void{
			trace(_info)
			saveAllStr = new String;
//			var ary:Array = _info.strAry;
//			ary.splice(1,1);
//			for(var i:int=1;i<frameAry.length-1;i++){
//				if(frameAry[i].isInter){
//					ary[i+2] = "frame " + i + " {}\n\r";
//				}
//			}
//			for(i=0;i<ary.length;i++){
//				saveAllStr += ary[i];
//			}
			//trace(allStr);
			var interStr:String = new String;
			for(var i:int=1;i<frameAry.length-1;i++){
				if(frameAry[i].isInter){
					interStr += i+","
				}
			}
			if(interStr != ""){
				saveAllStr += "inter " + interStr + "\r\n";
			}
			
			if(isinLoop.selected && loopTxt.text != ""){
				saveAllStr += "inLoop " + loopTxt.text  + "\r\n";
			}
			
			saveAllStr += _info.str;
			var file:File = new File;
			file.addEventListener(Event.SELECT,onSaveSel);
			file.browseForSave("另存为");
		}
		
		protected function onSaveSel(event:Event):void{
			var file:File = event.target as File;
			
			if(!(file.extension == "md5anim")){
				file = new File(file.nativePath + ".md5anim");
			}
			
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.WRITE);
			fs.writeUTFBytes(saveAllStr);
			fs.close();
		}
		/**
		 * 实时保存数据
		 * 将插值数据和循环帧数据实时保存
		 * */
		private function realTimeSave():void{
			var interAry:Array = new Array;
			for(var i:int=1;i<frameAry.length-1;i++){
				if(frameAry[i].isInter){
					interAry.push(i);
				}
			}
			_info.interAry = interAry;
			
			if(isinLoop.selected && loopTxt.text != ""){
				_info.inLoop = int(loopTxt.text);
			}else{
				_info.inLoop = 0;
			}
			
		}
		
		private function showBoundPanel():void{
			BoundPanel.getInstance().show(this.parent,_info);
		}
		
		private function showNamePos():void{
			namePosPanle.show(this.parent,_info);
		}
		
	]]>
</fx:Script>
	<mx:UIComponent id="ui" y="30" x="3"/>
	<mx:UIComponent id="headUI" x="3" y="10" mouseChildren="false" mouseEnabled="false"/>
	<mx:Button x="11" y="74" label="隔帧剔除" click="delInter()"/>
	<mx:Button x="89" y="74" label="重置" click="reset()"/>
	<mx:Button y="74" right="10" label="另存为" click="cloneSave()" visible="false"/>
	<mx:CheckBox id="isinLoop" x="693" y="75" label="是否分阶段" selected="false" click="realTimeSave()"/>
	<mx:TextInput id="loopTxt" x="779" y="73" enabled="{isinLoop.selected}" change="realTimeSave()"/>
	<mx:Button x="981" y="73" label="包围盒" click="showBoundPanel()" mouseFocusEnabled="false"/>
	<mx:Button x="981" y="43" label="名称高度" click="showNamePos()" mouseFocusEnabled="false"/>
</mx:Canvas>
