<?xml version="1.0" encoding="utf-8"?>
<frame:BasePanel xmlns:fx="http://ns.adobe.com/mxml/2009" horizontalScrollPolicy="off" verticalScrollPolicy="off"
		  xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="onCom()"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="296" height="300" xmlns:frame="common.utils.frame.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.treeClasses.TreeItemRenderer;
		import mx.events.ListEvent;
		
		import _Pan3D.base.Object3D;
		import _Pan3D.base.ObjectBone;
		import _Pan3D.core.MathHitModel;
		import _Pan3D.display3D.Display3DMaterialSprite;
		import _Pan3D.load.LoadInfo;
		import _Pan3D.load.LoadManager;
		import _Pan3D.particle.ctrl.CombineParticle;
		import _Pan3D.particle.ctrl.ParticleManager;
		import _Pan3D.program.shaders.MaterialShader;
		import _Pan3D.utils.MaterialManager;
		import _Pan3D.vo.anim.BoneSocketData;
		
		import _me.Scene_data;
		
		import common.utils.frame.ReflectionData;
		
		import materials.MaterialTree;
		
		import renderLevel.BoneHitModelSprite;
		import renderLevel.Display3DMovieLocal;
		
		import view.ridepos.RidePosUtils;
		
		import xyz.MoveScaleRotationLevel;
		import xyz.base.TooXyzPosData;
		import xyz.draw.TooXyzMoveData;
		
		
		
		
		private static var _instance:BonePanel;
		
		[Bindable]
		public var dataAry:ArrayCollection;
		
		private var orgiAry:Array;
		
		private var _socketList:Array = new Array;
		
		private var _showDefault:Boolean = true;
		
		private var _showDic:Object = new Object;
		
		private var _boneSocketHangList:BoneSocketHangList = new BoneSocketHangList;
		
		
		public static function getInstance():BonePanel{
			if(!_instance){
				_instance = new BonePanel;
			}
			return _instance;
		}
		
		private function initView():void{
			var ary:Array =
				[
					{Type:ReflectionData.Input,Label:"名称:",GetFun:getName,SetFun:setName,Category:"属性",Step:0.01},
					{Type:ReflectionData.Vec3,Label:"位移:",GetFun:getPos,SetFun:setPos,Category:"属性",Step:0.01},
					{Type:ReflectionData.Vec3,Label:"旋转:",GetFun:getRotaion,SetFun:setRotaion,Category:"属性",Step:0.01},
					{Type:ReflectionData.Btn,Label:"测试显示",SetFun:onNewObjs,Category:"模型"},
					{Type:ReflectionData.Btn,Label:"历史记录",SetFun:showSocketList,Category:"模型"},
					{Type:ReflectionData.Btn,Label:"动作",SetFun:onSelAction,Category:"模型"},
					{Type:ReflectionData.CheckBox,Label:"显示默认模型:",GetFun:getShowDefault,SetFun:setShowDefault,Category:"模型"},
				]
			propPanle.creat(ary);
			propPanle.refreshView();
		}
		
		public function setShowDefault(value:Boolean):void{
			_showDefault = value;
			BoneHitModelSprite.getInstance().visible = value;
		}
		
		public function getShowDefault():Boolean{
			return _showDefault;
		}
		
		public function showSocketList():void{
			var ary:Array = _showDic[selectScoket.name];
			
			_boneSocketHangList.show(ary);
			
		}
		
		public function onSelAction():void{
			var selRole:Display3DMovieLocal = getSocketMovie(selectScoket.name);
			
			if(!selRole){
				return;
			}
			
			var nameAry:Array = selRole.getAnimNameList();
			
			
			var _menuFile:NativeMenu = new NativeMenu();  
			
			var ary:Array = new Array;
			
			for(var i:int;i<nameAry.length;i++){
				var addType:NativeMenuItem = new NativeMenuItem(nameAry[i]);  
				addType.addEventListener(Event.SELECT,onMenuSel);
				addType.data = nameAry[i];
				ary.push(addType);
			}
			
			_menuFile.items = ary;  
			_menuFile.display(stage,stage.mouseX,stage.mouseY);
		}
		
		protected function onMenuSel(event:Event):void
		{
			var key:String = event.target.data as String;
			var selRole:Display3DMovieLocal = getSocketMovie(selectScoket.name);
			if(selRole){
				selRole.play(key);
			}
		}
		
		public function onNewObjs():void{
			var filefilter:FileFilter = new FileFilter("请选择","*.prefab;*.lyf;*.group;*.zzw");
			var file:File=new File;
			file.browse([filefilter]);
			file.addEventListener(Event.SELECT,onModelSelect);
		}
		
		protected function onModelSelect(event:Event):void
		{
			var file:File = event.target as File;
			
			var info:Object = new Object;
			
			if(!_showDic[selectScoket.name]){
				_showDic[selectScoket.name] = new Array;
			}
			
			
			if(file.extension == "prefab"){
				info.isGroup = false;
				addPrefab(file.url,info);
			}else if(file.extension == "lyf"){
				addParticle(file.url,info);
			}else if(file.extension == "group"){
				addGroup(file.url);
			}else if(file.extension == "zzw"){
				addRole(file.url);
			}
			
			
		}
		
		private function hideItem(key:String,info:Object):void{
			var ary:Array = _showDic[key];
			for(var i:int;i<ary.length;i++){
				if(ary[i] != info && ary[i].visible){
					ary[i].visible = false;
					
					if(ary[i].type == 1){
						AppDataBone.sceneLevel.roleLevel.removeChile(ary[i].data);
					}else if(ary[i].type == 2){
						ParticleManager.getInstance().removeParticle(ary[i].data);
					}else if(ary[i].type == 3){
						var itemAry:Array = ary[i].data;
						for(var j:int=0;j<itemAry.length;j++){
							if(itemAry[j] is CombineParticle){
								ParticleManager.getInstance().removeParticle(itemAry[j]);
							}else if(itemAry[j] is Display3DMaterialSprite){
								AppDataBone.sceneLevel.roleLevel.removeChile(itemAry[j]);
							}
						}
					}else if(ary[i].type == 4){
						AppDataBone.sceneLevel.roleLevel.removeChile(ary[i].data);
					}
					
				}
			}
			
			
			
		}
		
		private function hideAll():void{
			for(var key:String in _showDic){
				var ary:Array = _showDic[key];
				for(var i:int = 0;i<ary.length;i++){
					if(ary[i].visible){
						
						if(ary[i].type == 1){
							AppDataBone.sceneLevel.roleLevel.removeChile(ary[i].data);
						}else if(ary[i].type == 2){
							ParticleManager.getInstance().removeParticle(ary[i].data);
						}else if(ary[i].type == 3){
							var itemAry:Array = ary[i].data;
							for(var j:int=0;j<itemAry.length;j++){
								if(itemAry[j] is CombineParticle){
									ParticleManager.getInstance().removeParticle(itemAry[j]);
								}else if(itemAry[j] is Display3DMaterialSprite){
									AppDataBone.sceneLevel.roleLevel.removeChile(itemAry[j]);
								}
							}
						}else if(ary[i].type == 4){
							AppDataBone.sceneLevel.roleLevel.removeChile(ary[i].data);
						}
						
					}
				}
			}
		}
		
		private function addPrefab($url:String,info:Object):void{
			
			var saveObj:Object = new Object;
			saveObj.url = $url.replace(Scene_data.fileRoot,"");
			saveObj.visible = true;
			saveObj.type = 1;
			
			_showDic[selectScoket.name].push(saveObj);
			
			info.saveObj = saveObj;
			info.socketName = selectScoket.name;
			
			hideItem(selectScoket.name,saveObj);
			
			loadPrefab($url,info);
		}
		
		
		
		private function addRole($url:String):void{
			
			var saveObj:Object = new Object;
			saveObj.url = $url.replace(Scene_data.fileRoot,"");
			saveObj.visible = true;
			saveObj.type = 4;
			
			var info:Object = new Object;
			info.saveObj = saveObj;
			info.socketName = selectScoket.name;

			_showDic[selectScoket.name].push(saveObj);
			
			hideItem(selectScoket.name,saveObj);
			
			
			loadRole($url,info);
		}
		
		public function loadRole($url:String,info:Object):void{
			var file:File = new File($url)
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.READ);
			var roleData:Object = fs.readObject();
			fs.close();
			
			var meshAry:Array = new Array;
			
			for(var i:int;i<roleData.mesh.length;i++){
				var children:ArrayCollection = roleData.mesh[i].children;
				for(var j:int=0;j<children.length;j++){
					meshAry.push(children[j]);
				}
			}
			
			var obj:Object = new Object;
			obj.bone = roleData.bone;
			obj.mesh = meshAry;
			obj.socket = roleData.socket;
			
			var role:Display3DMovieLocal = new RidePosUtils(obj).getRide();
			role.name = file.name;
			role.bindTarget = AppDataBone.role;
			
			if(roleData.hasOwnProperty("scale")){
				role.fileScale = roleData.scale;
			}
			
			obj.role = role; 
			
			role.bindTarget = AppDataBone.role;
			role.bindSocket = info.socketName;
			
			if(info.saveObj.visible){
				AppDataBone.sceneLevel.roleLevel.addChild(role);
			}
			
			info.saveObj.data = role;
		}
		
		public function getSocketMovie(key:String):Display3DMovieLocal{
			var ary:Array = _showDic[key];
			if(!ary){
				return null;
			}
			for(var i:int;i<ary.length;i++){
				if(ary[i].type == 4 && ary[i].visible){
					return ary[i].data;
				}
			}
			return null;
		}
		
		private function loadPrefab($url:String,$info:Object):void{
			var loaderinfo:LoadInfo = new LoadInfo($url,LoadInfo.BYTE,onPrefabLoad,0,$info);
			LoadManager.getInstance().addSingleLoad(loaderinfo);
		}
		
		private function onPrefabLoad(byte:ByteArray,info:Object):void
		{
		
			var obj:Object = byte.readObject();
			
			var display:Display3DMaterialSprite = new Display3DMaterialSprite(Scene_data.context3D);
			display.url = Scene_data.fileRoot +  obj.axoFileName;
			MaterialManager.getInstance().getMaterial(Scene_data.fileRoot + obj.materialUrl,addMaterial,display,true,MaterialShader.MODEL_SHADER,MaterialShader);
			if(info.saveObj.visible){
				AppDataBone.sceneLevel.roleLevel.addChild(display);
			}
			display.bindTarget = AppDataBone.role;
			display.bindSocket = info.socketName;
			display.setMaterialParam(obj.materialInfoArr);
			
			info.saveObj.baseData = obj;
			
			if(info.isGroup){
				display.isInGroup = true;
				display.groupPos = info.pos;
				display.groupScale = info.scale;
				display.groupRotation = info.rotation;
			}
			
			if(info.saveObj){
				if(info.saveObj.type == 1){
					info.saveObj.data = display;
				}else if(info.saveObj.type == 3){
					info.saveObj.data.push(display);
				}
			}
			
		}
		
		
		private function addParticle($url:String,info:Object):void{
			
			var saveObj:Object = new Object;
			saveObj.url = $url.replace(Scene_data.fileRoot,"");
			saveObj.visible = true;
			saveObj.type = 2;
			_showDic[selectScoket.name].push(saveObj);
				
			info.saveObj = saveObj;
			info.socketName = selectScoket.name;
				
			hideItem(selectScoket.name,saveObj);
				
			loadParticle($url,info);
		}
		
		private function loadParticle($url:String,info:Object):CombineParticle{
			var particles:CombineParticle = ParticleManager.getInstance().getParticle($url);
			particles.bindTarget = AppDataBone.role;
			particles.bindSocket = info.socketName;
			particles.visible = true;
			if(info.saveObj.visible){
				ParticleManager.getInstance().addParticle(particles);
			}
			
			if(info.saveObj){
				if(info.saveObj.type == 2){
					info.saveObj.data = particles;
				}else if(info.saveObj.type == 3){
					info.saveObj.data.push(particles);
				}
			}
			
			return particles;
		}
		
		private function addGroup($url:String):void{
			
			
			var saveObj:Object = new Object;
			saveObj.url = $url.replace(Scene_data.fileRoot,"");
			saveObj.visible = true;
			saveObj.data = [];
			saveObj.type = 3;
			
			_showDic[selectScoket.name].push(saveObj);
			
			hideItem(selectScoket.name,saveObj);
			
			var info:Object = new Object;
			info.saveObj = saveObj;
			info.socketName = selectScoket.name;
			
			loadGroup($url,info);
			
		}
		
		private function loadGroup($url:String,$inputInfo:Object):void{
			var file:File = new File($url);
			var fs:FileStream = new FileStream();
			fs.open(file,FileMode.READ);
			var obj:Object = fs.readObject();
			fs.close();
			
			
			
			var ary:Array = obj.item[0].children;
			for(var i:int;i<ary.length;i++){
				var item:Object = ary[i];
				
				var pos:Vector3D = new Vector3D(item.x,item.y,item.z);
				var scale:Vector3D = new Vector3D(item.scaleX,item.scaleY,item.scaleZ);
				var rotation:Vector3D = new Vector3D(item.rotationX,item.rotationY,item.rotationZ);
				
				var info:Object = new Object;
				
				if(item.type == 1){
					info.isGroup = true;
					info.pos = pos;
					info.scale = scale;
					info.rotation = rotation;
					info.saveObj = $inputInfo.saveObj;
					info.socketName = $inputInfo.socketName;
					loadPrefab(Scene_data.fileRoot + item.data.url,info);
				}else if(item.type == 11){
					info.socketName = $inputInfo.socketName;
					info.saveObj = $inputInfo.saveObj;
					var cp:CombineParticle = loadParticle(Scene_data.fileRoot + item.data.url,info);
					cp.isInGroup = true;
					cp.groupPos = pos;
					cp.groupScale = scale;
					cp.groupRotation = rotation;
				}
				
			}
			
		}
		
		
		private function addMaterial($mt:MaterialTree,info:Object):void{
			info.material = $mt;
		}
		 
		
		public function setName(value:String):void{
			if(selectScoket){
				for(var i:int;i<_socketList.length;i++){
					if(_socketList[i] != selectScoket && _socketList[i].name == value){
						propPanle.refreshView();
						Alert.show("名字重复","警告");
						return;
					}
				}
				
				selectScoket.name = value;
				
				var pItem:Object = getObjByname(dataAry,selectScoket.boneName);
				
				list.expandItem(pItem,false);
				list.expandItem(pItem,true);
				
				AppDataBone.role.addSocket(BoneSocketData(selectScoket));
				
			}
			
		}
		
		public function getName():String{
			if(selectScoket){
				return selectScoket.name;
			}else{
				return "name";
			}
		}
		
		public function setPos(value:Vector3D):void{
			if(selectScoket){
				selectScoket.x = value.x;
				selectScoket.y = value.y;
				selectScoket.z = value.z;
				setXYZleveData()
			}
		}
		
		public function getPos():Vector3D{
			if(selectScoket){
				return new Vector3D(selectScoket.x,selectScoket.y,selectScoket.z);
			}else{
				return new Vector3D;
			}
			
		}
		
		public function setRotaion(value:Vector3D):void{
			if(selectScoket){
				selectScoket.rotationX = value.x;
				selectScoket.rotationY = value.y;
				selectScoket.rotationZ = value.z;
				setXYZleveData()
			}
		}
		
		public function getRotaion():Vector3D{
			if(selectScoket){
				return new Vector3D(selectScoket.rotationX,selectScoket.rotationY,selectScoket.rotationZ);
			}else{
				return new Vector3D;
			}
		}
		
		private function onCom():void{
			list.setStyle("contentBackgroundColor",0x404040);
			list.iconFunction = tree_iconFunc;
			
			initView();
			addEvents();
			
			propPanle.visible = false;
		}
		public function setData(ary:Array):void{
			if(dataAry){
				return;
			}
			
			orgiAry = ary;
			
			dataAry = new ArrayCollection;
			for(var i:int;i<ary.length;i++){
				var obj:Object = new Object;
				obj.info = ary[i];
				obj.name = ary[i].name; 
				obj.isbone = true;
				
				dataAry.addItem(obj);
			}
			
			AppDataBone.boneList = dataAry;
			
			dataAry = processBone2Tree(ary);
			
			processSocketList();
		}
		
		private function processSocketList():void{
			for(var i:int;i<_socketList.length;i++){
				var obj:Object = getObjByname(dataAry,_socketList[i].boneName);
				if(!obj){
					continue;
				}
				if(!obj.children){
					obj.children = new ArrayCollection;
				}
				obj.children.addItem(_socketList[i]);
			}
		}
		
		private function processBone2Tree($boneAry:Array):ArrayCollection{
			var ary:ArrayCollection = new ArrayCollection;
			
			for(var i:int;i<$boneAry.length;i++){
				var obone:ObjectBone = $boneAry[i];
				var obj:Object = new Object;
				obj.name = obone.name;
				obj.info = obone;
				obj.isBone = true;
				if(obone.father == -1){
					obj.isRoot = true;
					ary.addItem(obj);
					obj.index = [0];
				}else{
					var objs:Object = getObj(ary,$boneAry[obone.father]);
					
					if(!objs.children){
						objs.children = new ArrayCollection();
					}
					
					objs.children.addItem(obj);
					
					obj.index = getCloneIndex(objs.index,objs.children.length-1);
					
				}
			}
			
			return ary;
		}
		
		private function getCloneIndex($ary:Array,$index:int):Array{
			var resultAry:Array = new Array;
			for(var i:int;i<$ary.length;i++){
				resultAry.push($ary[i]);
			}
			resultAry.push($index);
			return resultAry;
		}
		
		private function getObj(ary:ArrayCollection,obj:Object):Object{
			trace(ary)
			trace(obj)
			for(var i:int;i<ary.length;i++){
				if(ary[i].info == obj){
					return ary[i];
					
				}
				if(!ary[i].isSocket && ary[i].children){
					var objs:Object = getObj(ary[i].children,obj);
					if(objs){
						return objs;
					}
				}
			}
			return null;
		}
		
		private function getObjByname(ary:ArrayCollection,str:String):Object{
			for(var i:int;i<ary.length;i++){
				if(ary[i].name == str){
					return ary[i];
					
				}
				if(!ary[i].isSocket && ary[i].children){
					var objs:Object = getObjByname(ary[i].children,str);
					if(objs){
						return objs;
					}
				}
			}
			return null;
		}
		
		[Embed(source='style/btn/charu_icon_16.png')]
		private var KongCls:Class;
		[Embed(source='style/btn/owen_icon_x15.png')]
		private var BoneCls:Class
		private function tree_iconFunc(item:Object):Class {  
			var iconClass:Class;
			if(item is BoneSocketData){
				return KongCls;
			}else if(item.isRoot){
				return BoneCls;
			}
			return iconClass;
		}
		
		public function clear():void{
			hideAll();
			
			dataAry = null;
			
			orgiAry = null;
			
			_socketList = new Array;
			
			_showDic = new Object;
		}
		
		
		
		private var lastIndex:int;
		private var selectScoket:Object;
		private var selectItem:Object;
		protected function list_itemClickHandler(event:ListEvent):void
		{
			AppDataBone.role.setSelectIndex(lastIndex,false);
			var item:Object = list.selectedItem;
			var index:int;
			
			if(item.isSocket){
				selectScoket = item;
				propPanle.visible = true;
				for(var i:int;i<orgiAry.length;i++){
					if(orgiAry[i].name == item.boneName){
						index = i;
						break;
					}
				}
			}else{
				selectScoket = null;
				propPanle.visible = false;
				index = orgiAry.indexOf(item.info);
			}
			
	
			AppDataBone.role.setSelectIndex(index,true);
			
			lastIndex = index;
			propPanle.refreshView();
			_isSocket=item.isSocket
		
				setXYZleveData()
			
			
			
		}
		private var _isSocket:Boolean=false
		private function setXYZleveData():void
		{
		
			_roleScale=AppDataBone.role.scale
			if(AppDataBone.role.pause &&_isSocket){
				var $arrBone:Array=AppDataBone.role.getCurrentMatrixList()
				if($arrBone){
					_sceleBonObject=$arrBone[lastIndex];
					var $m:Matrix3D=_sceleBonObject.matrix.clone()
					var $addM:Matrix3D=new Matrix3D
					
					$addM.appendRotation(selectScoket.rotationX,Vector3D.X_AXIS)
					$addM.appendRotation(selectScoket.rotationY,Vector3D.Y_AXIS)
					$addM.appendRotation(selectScoket.rotationZ,Vector3D.Z_AXIS)
					$addM.appendTranslation(selectScoket.x,selectScoket.y,selectScoket.z)
					
					$addM.append($m)
					var $object3d:Object3D=getObje3DFromMatrix($addM)
					
					$object3d.x*=_roleScale
					$object3d.y*=_roleScale
					$object3d.z*=_roleScale
					
					var $arr:Vector.<Object3D>=new Vector.<Object3D>;
					$arr.push($object3d)
					selectModel($arr)
					
					BoneHitModelSprite.getInstance().posMatrix=$addM.clone()
					BoneHitModelSprite.getInstance().posMatrix.appendScale(_roleScale,_roleScale,_roleScale)
					if(_showDefault){
						BoneHitModelSprite.getInstance().visible=true
					}
					
					var toPos:Vector3D=_sceleBonObject.matrix.position.clone()
					toPos.scaleBy(_roleScale)
					BoneHitModelSprite.getInstance().setBonePos(toPos)
					
					
				}
			}else{
				MoveScaleRotationLevel.getInstance().xyzMoveData=null
				BoneHitModelSprite.getInstance().visible=false
			}
		}
		
		protected function onEnterFrame(event:Event):void
		{
			if(!AppDataBone.role.pause){
				var $arrBone:Array=AppDataBone.role.getCurrentMatrixList()
				if($arrBone&&selectScoket){
					_sceleBonObject=$arrBone[lastIndex];
					
					var $m:Matrix3D=_sceleBonObject.matrix.clone()
					var $addM:Matrix3D=new Matrix3D
					
					$addM.appendScale(1/_roleScale,1/_roleScale,1/_roleScale);
					$addM.appendRotation(selectScoket.rotationX,Vector3D.X_AXIS)
					$addM.appendRotation(selectScoket.rotationY,Vector3D.Y_AXIS)
					$addM.appendRotation(selectScoket.rotationZ,Vector3D.Z_AXIS)
					$addM.appendTranslation(selectScoket.x,selectScoket.y,selectScoket.z)
					
					$addM.append($m)
			
					BoneHitModelSprite.getInstance().posMatrix=$addM.clone()
					BoneHitModelSprite.getInstance().posMatrix.appendScale(_roleScale,_roleScale,_roleScale)
					if(_showDefault){
						BoneHitModelSprite.getInstance().visible=true;
					}
					
					
					var toPos:Vector3D=_sceleBonObject.matrix.position.clone()
					toPos.scaleBy(_roleScale)
					BoneHitModelSprite.getInstance().setBonePos(toPos)
					MoveScaleRotationLevel.getInstance().xyzMoveData=null
				}
			}
			
			
			
		}
		
		private var _roleScale:Number=1
		private var currentItem:TreeItemRenderer;
		protected function tree_rightClickHandler(event:MouseEvent):void
		{
			if(event.target is TreeItemRenderer){
				currentItem = event.target as TreeItemRenderer;
			}else{
				currentItem = (DisplayObject(event.target).parent) as TreeItemRenderer
			}
			
			var _menuFile:NativeMenu = new NativeMenu();  
			var addType:NativeMenuItem = new NativeMenuItem("创建插孔");  
			addType.addEventListener(Event.SELECT,onMenuAddTpye);
			var addItem:NativeMenuItem = new NativeMenuItem("删除插孔");  
			addItem.addEventListener(Event.SELECT,onMenuAddItem);
			
			if(currentItem && currentItem.data.isSocket){
				addType.enabled = false;
				addItem.enabled = true;
			}else{
				addType.enabled = true;
				addItem.enabled = false;
			}
			
			_menuFile.items = [addType,addItem];  
			_menuFile.display(stage,stage.mouseX,stage.mouseY);
		}
		
		private function onMenuAddItem(event:Event):void{
			var boneData:Object = currentItem.data;
			var pobj:Object = getObjByname(dataAry,boneData.boneName);
			ArrayCollection(pobj.children).removeItem(boneData);
			
			var index:int = _socketList.indexOf(boneData);
			if(index != -1){
				_socketList.splice(index,1);
			}
			
			AppDataBone.role.removeSocket(boneData.name);
		}
		
		private function onMenuAddTpye(event:Event):void{
			var boneData:Object = currentItem.data;
			if(!boneData.children){
				boneData.children = new ArrayCollection;
			}
			
			
			var index:int;
			
			for(var i:int;i<orgiAry.length;i++){
				if(orgiAry[i].name == boneData.name){
					index = i;
					break;
				}
			}
			
			var obj:BoneSocketData = new BoneSocketData;
			obj.name = boneData.name + "_socket_" + boneData.children.length;
			obj.isSocket = true;
			obj.boneName = boneData.info.name;
			obj.x = 0;
			obj.y = 0;
			obj.z = 0;
			obj.rotationX = 0;
			obj.rotationY = 0;
			obj.rotationZ = 0;
			obj.index = index;
			
			boneData.children.addItem(obj);
			dataAry.refresh();
			list.expandItem(boneData,true);
			
			_socketList.push(obj);
			
			AppDataBone.role.addSocket(obj);
		}
		
		private function addEvents():void
		{

			Scene_data.stage.addEventListener(KeyboardEvent.KEY_DOWN,keydownHandler);
			Scene_data.stage.addEventListener(Event.ENTER_FRAME,onEnterFrame)
			Scene_data.stage.addEventListener(MouseEvent.MOUSE_DOWN,onMouseDown)
		}
		private function keydownHandler(evt:KeyboardEvent):void
		{
			if(evt.keyCode == 32){
				AppDataBone.role.pause = !AppDataBone.role.pause;
			}
		}
		private var _sceleBonObject:ObjectBone;

		
		private function getObje3DFromMatrix(matrix:Matrix3D):Object3D
		{
			var vv:Vector.<Vector3D>=matrix.decompose();
			var q:Vector3D=vv[0];//  平移
			var w:Vector3D=vv[1];//  旋转
			var e:Vector3D=vv[2];//  缩放
			var $obj:Object3D=new Object3D
			$obj.x=q.x
			$obj.y=q.y
			$obj.z=q.z
			$obj.rotationX=w.x*180/Math.PI,
			$obj.rotationY=w.y*180/Math.PI,
			$obj.rotationZ=w.z*180/Math.PI,
			$obj.scale_x=1
			$obj.scale_y=1
			$obj.scale_z=1
			return $obj;
		}
		

		
		private function selectModel($arr:Vector.<Object3D>):void
		{
			var _tooXyzMoveData:TooXyzMoveData=new TooXyzMoveData;
			
			if($arr){
				
				_tooXyzMoveData.dataItem=new Vector.<TooXyzPosData>;
				_tooXyzMoveData.modelItem=new Array
				for (var i:uint=0;i<$arr.length;i++)
				{
					var k:TooXyzPosData=new TooXyzPosData;
					k.x=$arr[i].x
					k.y=$arr[i].y
					k.z=$arr[i].z
					k.scale_x=$arr[i].scale_x
					k.scale_y=$arr[i].scale_y
					k.scale_z=$arr[i].scale_z
					k.angle_x=$arr[i].rotationX
					k.angle_y=$arr[i].rotationY
					k.angle_z=$arr[i].rotationZ
					_tooXyzMoveData.dataItem.push(k)
					_tooXyzMoveData.modelItem.push($arr[i])
						

				}
				_tooXyzMoveData.fun=xyzBfun
				MoveScaleRotationLevel.getInstance().xyzMoveData=_tooXyzMoveData
				
			}else{
				MoveScaleRotationLevel.getInstance().xyzMoveData=null
			}
		}
		private  function xyzBfun($XyzMoveData:xyz.draw.TooXyzMoveData):void
		{

			if(!AppDataBone.role.pause ){
				MoveScaleRotationLevel.getInstance().xyzMoveData=null
				return ;
			}
			
			for(var i:uint=0;i<$XyzMoveData.modelItem.length;i++){
				var $iModel:Object3D=$XyzMoveData.modelItem[i]
				var $dataPos:TooXyzPosData=$XyzMoveData.dataItem[i]

					
				var posMatrix:Matrix3D=new Matrix3D;
				posMatrix.prependTranslation($dataPos.x/(_roleScale	),$dataPos.y/(_roleScale	),$dataPos.z/(_roleScale	));
				posMatrix.prependRotation($dataPos.angle_z , Vector3D.Z_AXIS);
				posMatrix.prependRotation($dataPos.angle_y , Vector3D.Y_AXIS);
				posMatrix.prependRotation($dataPos.angle_x , Vector3D.X_AXIS);
				
				
				BoneHitModelSprite.getInstance().posMatrix=posMatrix.clone()
				BoneHitModelSprite.getInstance().posMatrix.appendScale(_roleScale,_roleScale,_roleScale)
		
				
				var $m:Matrix3D=_sceleBonObject.matrix.clone()
				$m.invert()
				posMatrix.append($m)
	
					
				var $object3d:Object3D=getObje3DFromMatrix(posMatrix)
		
				selectScoket.x=$object3d.x;
				selectScoket.y=$object3d.y;
				selectScoket.z=$object3d.z;
				selectScoket.rotationX=$object3d.rotationX
				selectScoket.rotationY=$object3d.rotationY
				selectScoket.rotationZ=$object3d.rotationZ
				
				
				var toPos:Vector3D=_sceleBonObject.matrix.position.clone()
				toPos.scaleBy(_roleScale)
				BoneHitModelSprite.getInstance().setBonePos(toPos)

			}
			
			propPanle.refreshView();
		}
		//清理没有骨骼的插口
		private function meshSocketList():void
		{
			var $arr:Array=new Array
			for(var i:Number=0;_socketList&&i<_socketList.length;i++){
				var hasItBone:Boolean=false
				for(var j:int=0;j<AppDataBone.boneList.length;j++){
					var a:*=AppDataBone.boneList [j]
					var b:*=_socketList[i]
					if(a.name==b.boneName)
					{
						hasItBone=true;
					}
				}
				if(hasItBone){
					$arr.push(_socketList[i])
				}
			}
			
			_socketList=$arr
		}
				
		public function getAllInfo():Object{
			this.meshSocketList()
			var obj:Object = new Object;
			obj.socket = _socketList;
			obj.hang =new Object;
			var $dic:Object=Object(cloneDic());
			

			for (var $name :String in $dic)
			{
				var need:Boolean=false;
				for(var j:Number=0;_socketList&&j<_socketList.length;j++){
					if(_socketList[j].name==$name){
						need=true
					}
				}
				if(need){
					
					obj.hang[$name]=$dic[$name]
				}
			
			}
			
			/*

			for each(var str:*  in $dic){
				var need:Boolean=false;
				for(var j:Number=0;_socketList&&j<_socketList.length;j++){
					if(_socketList[j].boneName==str){
						need=true
					}
				}
				if(need){
			
		
				}
			
			}
			*/
	
	
		
			return obj;
		}
		
		public function cloneDic():Object{
			var saveDic:Object = new Object;
			for(var key:String in _showDic){
				var ary:Array = _showDic[key];
				var newAry:Array = new Array;
				for(var i:int=0;i<ary.length;i++){
					var obj:Object = new Object;
					obj.url = ary[i].url;
					obj.type = ary[i].type;
					obj.visible = ary[i].visible;
					newAry.push(obj);
				}
				saveDic[key] = newAry;
			}
			return saveDic;
		}
		
		public function setAllInfo(obj:Object):void{
			if(!obj){
				return;
			}
			
			 
			var ary:Array = obj.socket as Array;
			for(var i:int;i<ary.length;i++){
				var boneSocket:BoneSocketData = new BoneSocketData;
				boneSocket.setObj(ary[i]);
				_socketList.push(boneSocket);
				AppDataBone.role.addSocket(boneSocket);
			}
			
			showSave(obj.hang);
		}
		
		private function showSave($dic:Object):void{
			for(var key:String in $dic){
				var ary:Array = $dic[key];
				var newAry:Array = new Array;
				for(var i:int=0;i<ary.length;i++){
					var info:Object = new Object;
					if(ary[i].type == 1){
						info.isGroup = false;
						info.saveObj = ary[i];
						info.socketName = key;
						loadPrefab(Scene_data.fileRoot + ary[i].url,info);
					}else if(ary[i].type == 2){
						info.saveObj = ary[i];
						info.socketName = key;
						loadParticle(Scene_data.fileRoot + ary[i].url,info);
					}else if(ary[i].type == 3){
						if(!(ary[i].data)){
							ary[i].data = new Array;
						}
						info.saveObj = ary[i];
						info.socketName = key;
						loadGroup(Scene_data.fileRoot + ary[i].url,info);
					}else if(ary[i].type == 4){
						info.saveObj = ary[i];
						info.socketName = key;
						loadRole(Scene_data.fileRoot + ary[i].url,info);
					}
					
					newAry.push(ary[i]);
				}
				_showDic[key] = newAry;
				
			}
			
		}
		
		

		protected function onMouseDown(event:MouseEvent):void
		{
			
			if(!AppDataBone.role.showLineBone){
				return;
			}
			
			if(event.ctrlKey){
				var $arrBone:Array=AppDataBone.role.getCurrentMatrixList()
				if($arrBone){
					_roleScale=AppDataBone.role.scale
					for(var i:uint=0;i<$arrBone.length;i++)
					{
						var $ObjectBone:ObjectBone=$arrBone[i] 
						var $pos:Vector3D=$ObjectBone.matrix.position.clone();
						$pos.scaleBy(_roleScale)
						var hitit:Boolean=MathHitModel.mathHit3DPoint($pos,10);
						if(hitit){
							var obj:Object = getObjByname(dataAry,$ObjectBone.name);
							expandTreeIndex(obj.index);
							list.selectedItem = obj;
							break;
						}
					}
					
				}
			}
			
		}
		
		private function expandTreeIndex(indexAry:Array):void{
			var root:ArrayCollection = dataAry;
			
			for(var i:int;i<indexAry.length;i++){
				list.expandItem(root[indexAry[i]],true);
				
				root = root[indexAry[i]].children;
			}
			
		}
		
		
		
		
	]]>
</fx:Script>
	
	<mx:Tree id="list" left="10" top="5" bottom="250" right="0" borderStyle="none" dataProvider="{dataAry}" focusEnabled="false"
			 rightClick="tree_rightClickHandler(event)" itemClick="list_itemClickHandler(event)" labelField="name" color="#9C9C9C">
	</mx:Tree>
	<frame:BaseReflectionView id="propPanle" left="0" top="{this.height - 250}" bottom="0" right="0">
		
	</frame:BaseReflectionView>
</frame:BasePanel>
