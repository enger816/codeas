<?xml version="1.0" encoding="utf-8"?>
<frame:BaseReflectionView xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" backgroundColor="#404040" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="1000" height="400" creationComplete="onCom()" xmlns:frame="common.utils.frame.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.txtSty{
			contentBackgroundColor : #404040;
			borderVisible:true;
			color:#9f9f9f;
		}
	</fx:Style>
<fx:Script>
	<![CDATA[
		import mx.containers.ViewStack;
		import mx.events.AIREvent;
		
		import spark.components.Window;
		
		import _me.Scene_data;
		import _me.xyzPos.XyzPosData;
		
		import common.utils.frame.BaseComponent;
		import common.utils.frame.ReflectionData;
		import common.utils.ui.btn.LButton;
		import common.utils.ui.cbox.ComLabelBox;
		import common.utils.ui.txt.TextLabelEnabel;
		import common.utils.ui.txt.TextLabelInput;
		import common.utils.ui.txt.TextVec3Input;
		
		import manager.LayerManager;
		
		import utils.FileConfigUtils;
		
		import view.bone.BonePanel;
		import view.controlCenter.configSkill.ConfigPoint;
		import view.particleList.ParticlePanle;
		
		import xyz.MoveScaleRotationLevel;
		import xyz.base.TooXyzPosData;
		import xyz.draw.TooXyzMoveData;
		private var isFirst:Boolean = true;
		/**
		 * 粒子信息
		 * */
		private var particleInfo:Object;
		/**
		 * 击中粒子信息
		 * */
		private var endParticleInfo:Object;
		/**
		 * 传入信息
		 * */
		private var _info:Object;
		/**
		 * 回调函数
		 * */ 
		private var _fun:Function;
		
		private var _configData:Object;
		
		[Bindable]
		private var _editMode:Boolean;
		
		private static var _instance:TrajectoryPanel;
		private var win:Window;

		private var beginPosViewStack:ViewStack;
		private var endPosViewStack:ViewStack; 
		
		private var _beginType:int;//0定点 1socket
		private var _mulType:int;
		private var _fixBeginPosV3d:Vector3D = new Vector3D;
		private var _beginSocket:String = "none";
		private var speed:Number = 0.5;
		private var _hitSocket:String = "";
		
		private var _typeIndex:int;

		private var fixEndPointTxt:TextVec3Input;

		private var hitParticletxt:TextLabelEnabel;
		
		private var configPointPanle:ConfigPoint = new ConfigPoint();

		private var basePosTxt:TextVec3Input;

		private var socketCb:ComLabelBox;

		private var txtHitLabel:TextLabelInput;
		
		private var xyzBeginPosData:TooXyzMoveData; 
		private var xyzEndPosData:TooXyzMoveData;

		private var dynamicTargetCav:BaseComponent;
		
		public static function getInstance():TrajectoryPanel{
			if(!_instance){
				_instance = new TrajectoryPanel;
				_instance.initView();
				_instance.init(null,"属性",2);
			}
			return _instance;
		}
		
		public function initView():void{
			this.creat(getAry());
			this.refreshView();
		}
		
		/**
		 * 显示
		 * */
		public function showPanel(info:Object,fun:Function,editMode:Boolean,$configData:Object):void{
			
			_info = info;
			_fun = fun;
			
			_configData = $configData;
			
			xyzBeginPosData = initXyzCtrl(xyzBeginfun);
			xyzEndPosData = initXyzCtrl(xyzEndfun);
			
			endParticleInfo = null;
			if(editMode){
				setAllInfo(info);
			}
			_editMode = editMode;
			
			LayerManager.getInstance().addPanel(this,true);
			return;
			
			win = new Window();
			win.transparent=false;
			win.type=NativeWindowType.UTILITY;
			win.systemChrome=NativeWindowSystemChrome.STANDARD;
			win.width=400;
			win.height=800;
			win.showStatusBar = false;
			win.addElement(this);
			win.alwaysInFront = true;
			win.resizable = false;
			win.setStyle("fontFamily","Microsoft Yahei");
			win.setStyle("fontSize",11); 
			win.addEventListener(AIREvent.WINDOW_COMPLETE,onWinCom);
			win.title = "效果配置";
			win.open(true);
			
		}
		
		private function initXyzCtrl($fun:Function):TooXyzMoveData{
			var temp:XyzPosData = new XyzPosData();
			temp.x = 0;
			temp.y = 0;
			temp.z = 0;
			temp.angle_x=0;
			temp.angle_y=0;
			temp.angle_z=0;
			
			var $xyzPosData:TooXyzMoveData = new TooXyzMoveData;
			$xyzPosData.dataItem=new Vector.<TooXyzPosData>;
			$xyzPosData.modelItem=new Array;
			
			var tempxyzPosData:XyzPosData=temp;
			var k:TooXyzPosData=new TooXyzPosData;
			k.x=tempxyzPosData.x;
			k.y=tempxyzPosData.y;
			k.z=tempxyzPosData.z;
			k.scale_x=1;
			k.scale_y=1;
			k.scale_z=1;
			k.angle_x=tempxyzPosData.angle_x;
			k.angle_y=tempxyzPosData.angle_y;
			k.angle_z=tempxyzPosData.angle_z;
			$xyzPosData.dataItem.push(k);
			$xyzPosData.modelItem.push(tempxyzPosData);
			
			$xyzPosData.fun=$fun;
			$xyzPosData.isCenten=true;
			
			return $xyzPosData;
		}
		
		public function xyzBeginfun($XyzMoveData:xyz.draw.TooXyzMoveData):void{
			var tooXyzPosData:TooXyzPosData;
			tooXyzPosData=$XyzMoveData.dataItem[0];
			
			_fixBeginPosV3d.setTo(tooXyzPosData.x,tooXyzPosData.y,tooXyzPosData.z);
			
			basePosTxt.ve3Data = _fixBeginPosV3d.clone();
			
			refreshInfo();
		}
		
		public function xyzEndfun($XyzMoveData:xyz.draw.TooXyzMoveData):void{
			var tooXyzPosData:TooXyzPosData;
			tooXyzPosData=$XyzMoveData.dataItem[0];
			fixEndPointTxt.ve3Data = new Vector3D(tooXyzPosData.x,tooXyzPosData.y,tooXyzPosData.z);
			refreshInfo();
		}
		
		protected function onWinCom(event:AIREvent):void
		{
			Window(event.target).nativeWindow.x=Scene_data.stage.nativeWindow.x+Scene_data.stage.stageWidth/2-Window(event.target).nativeWindow.width/2;
			Window(event.target).nativeWindow.y=Scene_data.stage.nativeWindow.y+Scene_data.stage.stageHeight/2-Window(event.target).nativeWindow.height/2;
		}
		/**
		 * 关闭
		 * */
		private function close():void{
			win.close();
		}
		/**
		 * 拖动存储位置
		 * */
		public function mouseUpDrag():void{
			this.stopDrag();
			FileConfigUtils.writeConfig("TrajectoryPanel",this.x + "|" + this.y);
		}
		/**
		 * 配置combobox选项
		 * */
		private function onCom():void{
			
			onCreatCom();
		}
		
		/**
		 * 显示粒子选择面板
		 * */
		private function addParticle():void{
			ParticlePanle.getInstance().show(this.parent,onParticleSelByDB);
		}
		
		/**
		 * 存储添加进来的粒子信息
		 * */
		private function onParticleSelByDB(obj:Object):void{
			
			particleInfo = new Object;
			particleInfo.particleUrl = Scene_data.particleRoot + "lid" + obj.id + ".lyf";
			particleInfo.particleID = obj.id;

		}
		
		private function showParticleFile():void{
			var file:File = new File;
			var filefilter:FileFilter = new FileFilter("请选择","*.lyf");
			file.browse([filefilter]);
			file.addEventListener(Event.SELECT,onParticleSel);
		}
		private function onParticleSel(event:Event):void{
			var file:File = event.target as File;
			var url:String = file.url.replace(Scene_data.fileRoot,"");
			
			particleInfo = new Object;
			particleInfo.particleUrl = url;
			//particleLabel.text = url;
			
			this.refreshView();
			
			refreshInfo();
			
		}
		/**
		 * 获取所有的配置信息
		 * */
		public function getAllInfo():Object{
			
			
			var type:int = _typeIndex;
			
			var typeInfo:Object;
			
			if(type == 0){
				var aInfo:Object = new Object;
				aInfo.endParticle = endParticleInfo;
				if(_hitSocket != ""){
					aInfo.hitSocket = _hitSocket;
				}
				typeInfo = aInfo;
			}else if(type == 1){
				var bInfo:Object = new Object;
				bInfo.pos = fixEndPointTxt.ve3Data.clone();
				typeInfo = bInfo;
			}else if(type == 2){
				var cInfo:Object = new Object;
				typeInfo = cInfo;
			}
			
			var resultObj:Object = new Object;
			
			resultObj.beginType = _beginType;
			if(_beginType == 0){
				resultObj.beginPos = _fixBeginPosV3d.clone();
			}else{
				resultObj.beginSocket = _beginSocket;
			}
			
			resultObj.type = type;
			resultObj.typeInfo = typeInfo;
			resultObj.speed = speed;
			resultObj.particleInfo = particleInfo;
			resultObj.multype = _mulType;
			
			return resultObj;
		}
		
		public function setAllInfo(obj:Object):void{
			var data:Object = obj.data;
			
			_beginType = data.beginType;
			if(_beginType == 0){
				_fixBeginPosV3d.setTo(data.beginPos.x,data.beginPos.y,data.beginPos.z);
				basePosTxt.ve3Data = _fixBeginPosV3d.clone();
			}else{
				_beginSocket = data.beginSocket;
				socketCb.selectItem = _beginSocket;
			}
			
			beginPosViewStack.selectedIndex = _beginType;
			
			_typeIndex = data.type;
			endPosViewStack.selectedIndex = _typeIndex;
			
			if(_typeIndex == 0){
				var aInfo:Object = data.typeInfo;
				
				endParticleInfo = aInfo.endParticle ;
				if(endParticleInfo){
					hitParticletxt.text = endParticleInfo.particleUrl; 
				}else{
					hitParticletxt.text = "";
				}
				
				_hitSocket = data.typeInfo.hitSocket;
				txtHitLabel.text = _hitSocket;
				
			}else if(_typeIndex == 1){
				var bInfo:Object = data.typeInfo;
				fixEndPointTxt.ve3Data = new Vector3D(bInfo.pos.x,bInfo.pos.y,bInfo.pos.z);
				
				hitParticletxt.text = "";
				txtHitLabel.text = "";
			}else if(_typeIndex == 2){
				hitParticletxt.text = "";
				txtHitLabel.text = "";
			}
			
			speed = data.speed;
			
			particleInfo = data.particleInfo;
			
			this._mulType = data.multype;
			
			this.refreshView();
		}
		
		private function onCreatCom():void{
			if(_editMode)
				setAllInfo(_info);
		}
		/**
		 * 确定所配置的信息
		 * */
		public function sureInfo():void{
			_info.data = getAllInfo();
			_info.type = 1;
			if(Boolean(_fun)){
				_fun(_info);
			}
			
			addBtn.visible = false;
		}
		
		public function refreshInfo():void{
			_info.data = getAllInfo();
			_info.type = 1;
			
		}
		
		/**
		 * 显示粒子选择面板
		 * */
		private function addEndParticle():void{
			ParticlePanle.getInstance().show(this.parent,onEndParticleSelByDB);
		}
		/**
		 * 存储添加进来的粒子信息
		 * */
		private function onEndParticleSelByDB(obj:Object):void{
			
			endParticleInfo = new Object;
			endParticleInfo.particleUrl = Scene_data.particleRoot + "lid" + obj.id + ".lyf";
			endParticleInfo.particleID = obj.id;
			
		}
		
		private function getAry():Array{
			var ary:Array =
				[
					{Type:ReflectionData.ComboBox,Label:"类型:",GetFun:getBeginType,SetFun:setBeginType,Category:"起始点",Data:[{id:0,name:"定点"},{id:1,name:"插孔"}]},
					{Type:ReflectionData.UserView,GetView:getBeginView,Category:"起始点"},
					{Type:ReflectionData.ComboBox,Label:"类型:",GetFun:getEndType,SetFun:setEndType,Category:"终止点",Data:[{id:0,name:"移动目标"},{id:1,name:"定点"},{id:2,name:"指定定点"}]},
					{Type:ReflectionData.UserView,GetView:getEndView,Category:"终止点"},
					{Type:ReflectionData.Number,Label:"速度:",GetFun:getSpeed,SetFun:setSpeed,Category:"飞行",MaxNum:100,MinNum:0,Step:0.01},
					{Type:ReflectionData.TextLabelEnabel,Label:"粒子特效:",GetFun:getUrl,Category:"飞行"},
					{Type:ReflectionData.Btn,Label:"选择特效:",SetFun:showParticleFile,Category:"飞行"},
					{Type:ReflectionData.ComboBox,Label:"类型:",GetFun:getMulType,SetFun:setMulType,Category:"弹道类型",Data:[{id:0,name:"单弹道"},{id:1,name:"多弹道"}]},
				]
			
			return ary;
		}
		
		public function getUrl():String{
			if(particleInfo && particleInfo.particleUrl){
				
				
				return decodeURI(particleInfo.particleUrl)
			}
			return "";
		}
		
		public function setSpeed(value:Number):void{
			speed = value;
			refreshInfo();
		}
		
		public function getSpeed():Number{
			return speed;
		}
		
		public function getBeginType():int
		{
			return _beginType;
		}
		
		public function setBeginType(value:Object):void
		{
			beginPosViewStack.selectedIndex = value.id;
			
			_beginType = value.id;
			
			refreshInfo();
			
			if(_beginType == 1){
				MoveScaleRotationLevel.getInstance().xyzMoveData = null;
			}
		}
		
		public function getMulType():int
		{
			return _mulType;
		}
		
		public function setMulType(value:Object):void
		{
			
			_mulType = value.id;
			
			refreshInfo();
			
		}
		
		public function getEndType():int
		{
			return _typeIndex;
		}
		
		public function setEndType(value:Object):void
		{
			endPosViewStack.selectedIndex = value.id;
			
			_typeIndex = value.id;
			
			refreshInfo();
			
			_configData.type = _typeIndex;
			
			MoveScaleRotationLevel.getInstance().xyzMoveData = null;
		}
		
		public function getBeginView():BaseComponent{
			var baseCom:BaseComponent = new BaseComponent;
			//baseCom.width = 200;
			//baseCom.isDefault = false;
			
			beginPosViewStack = new ViewStack; 
			beginPosViewStack.width = 200;
			
			basePosTxt = new TextVec3Input();
			basePosTxt.label = "定点";
			basePosTxt.height = 20;
			basePosTxt.width = 200;
			basePosTxt.changFun = setBeginPos;
			basePosTxt.addEventListener(MouseEvent.ROLL_OVER,onBeginPosTxtOver);
			beginPosViewStack.addChild(basePosTxt);
			
			socketCb = new ComLabelBox();
			socketCb.label = "插孔";
			socketCb.height = 20;
			socketCb.changFun = beginSocketChang;
			beginPosViewStack.addChild(socketCb);
			
			var _socketList:Array = BonePanel.getInstance().getAllInfo().socket as Array;
			socketCb.data = _socketList;
			
			if(_socketList.length){
				_beginSocket = _socketList[0].name;
			}
			
			baseCom.addChild(beginPosViewStack);
			
			return baseCom;
		}
		
		public function beginSocketChang(obj:Object):void{
			_beginSocket = obj.name;
			refreshInfo();
		}
		
		public function setBeginPos($posV3d:Vector3D):void{
			_fixBeginPosV3d.setTo($posV3d.x,$posV3d.y,$posV3d.z);
			refreshInfo();
			
			xyzBeginPosData.x = _fixBeginPosV3d.x;
			xyzBeginPosData.y = _fixBeginPosV3d.y;
			xyzBeginPosData.z = _fixBeginPosV3d.z;
			if(Boolean(xyzBeginPosData.dataUpDate)){
				xyzBeginPosData.dataUpDate()
			}
		}
		
		public function getEndView():BaseComponent{
			var baseCom:BaseComponent = new BaseComponent;
			baseCom.height = 100;
			baseCom.isDefault = false;
			
			endPosViewStack = new ViewStack; 
			
			endPosViewStack.height = 100;
			
			dynamicTargetCav = new BaseComponent; 
			dynamicTargetCav.height = 100;
			dynamicTargetCav.width = 250;
			dynamicTargetCav.isDefault = false;
			
			
			hitParticletxt = new TextLabelEnabel();
			hitParticletxt.height = 20; 
			hitParticletxt.width = 250;
			hitParticletxt.label = "击中特效："; 
			
			dynamicTargetCav.addChild(hitParticletxt);
			
			var selBtn:LButton = new LButton();
			selBtn.label = "选择";
			selBtn.y = 20;
			selBtn.height = 20;
			selBtn.changFun = showHitParticleFile;
			dynamicTargetCav.addChild(selBtn);
			
			var delBtn:LButton = new LButton();
			delBtn.label = "清除";
			delBtn.x = 80;
			delBtn.y = 20;
			delBtn.height = 20;
			delBtn.changFun = clearHitUrl;
			dynamicTargetCav.addChild(delBtn);
			
			var roleBtn:LButton = new LButton();
			roleBtn.label = "测试角色";
			roleBtn.y = 45;
			roleBtn.height = 20;
			roleBtn.changFun = selRole;
			dynamicTargetCav.addChild(roleBtn);
			
			txtHitLabel = new TextLabelInput(); 
			txtHitLabel.y = 70;
			txtHitLabel.height = 20;
			txtHitLabel.label = "击中插孔：";
			txtHitLabel.text = "";
			txtHitLabel.width = 200;
			txtHitLabel.changFun = hitSocketChange;
			txtHitLabel.changImmediately = true;
			dynamicTargetCav.addChild(txtHitLabel);
			

			endPosViewStack.addChild(dynamicTargetCav);
			
			
			fixEndPointTxt = new TextVec3Input();
			fixEndPointTxt.label = "定点：";
			fixEndPointTxt.height = 20;  
			fixEndPointTxt.changFun = fixEndPosChange;
			fixEndPointTxt.addEventListener(MouseEvent.ROLL_OVER,onEndPosTxtOver);
			endPosViewStack.addChild(fixEndPointTxt);
			
			
			var setPointBtn:LButton = new LButton();
			setPointBtn.label = "设置测试点";
			setPointBtn.changFun = showConfigPos;
			endPosViewStack.addChild(setPointBtn);
			

			baseCom.addChild(endPosViewStack);
			
			return baseCom;
		}
		
		private function fixEndPosChange(v3d:Vector3D):void{
			refreshInfo();
			
			xyzEndPosData.x = v3d.x;
			xyzEndPosData.y = v3d.y;
			xyzEndPosData.z = v3d.z;
			if(Boolean(xyzEndPosData.dataUpDate)){
				xyzEndPosData.dataUpDate();
			}
		}
		
		private function hitSocketChange($value:String):void{
			_hitSocket = $value;
			refreshInfo();
		}
		
		private function showHitParticleFile():void{
			var file:File = new File;
			var filefilter:FileFilter = new FileFilter("请选择","*.lyf");
			file.browse([filefilter]);
			file.addEventListener(Event.SELECT,onHitParticleSel);
		}
		private function onHitParticleSel(event:Event):void{
			var file:File = event.target as File;
			var url:String = file.url.replace(Scene_data.fileRoot,"");
			
			hitParticletxt.text = url;
			
			endParticleInfo = new Object;
			endParticleInfo.particleUrl = url;
			
			refreshInfo();
		}
		
		private function clearHitUrl():void{
			hitParticletxt.text = "";
			endParticleInfo = null;
			refreshInfo();
		}
		
		private function selRole():void{
			var file:File = new File;
			var filefilter:FileFilter = new FileFilter("请选择","*.zzw");
			file.browse([filefilter]);
			file.addEventListener(Event.SELECT,onRoleSel);
		}
		
		private function onRoleSel(event:Event):void{
			var file:File = event.target as File;
			var url:String = file.url.replace(Scene_data.fileRoot,"");
			_configData.roleUrl = url;
		}
		
		private function showConfigPos():void{
			configPointPanle.show(_configData);
		}
		
		protected function onBeginPosTxtOver(event:MouseEvent):void 
		{
			MoveScaleRotationLevel.getInstance().xyzMoveData = xyzBeginPosData;
		}
		
		protected function onEndPosTxtOver(event:MouseEvent):void
		{
			MoveScaleRotationLevel.getInstance().xyzMoveData = xyzEndPosData;
		}
		
		
		
	]]>
</fx:Script>
	<mx:Button id="addBtn" x="5" y="364" label="添加" click="sureInfo()" visible="{!_editMode}"/>
</frame:BaseReflectionView>
