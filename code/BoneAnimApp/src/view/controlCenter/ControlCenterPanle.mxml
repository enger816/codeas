<?xml version="1.0" encoding="utf-8"?>
<frame:BasePanel xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   width="1178" height="300" creationComplete="inits()" addedToStage="addedToStageHandler(event)" xmlns:frame="common.utils.frame.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import flash.utils.ByteArray;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.treeClasses.TreeItemRenderer;
		import mx.events.ListEvent;
		import mx.events.TreeEvent;
		
		import PanV2.PositionSpriteV2;
		
		import _Pan3D.skill.SkillManager;
		import _Pan3D.skill.SkillTimeLine;
		import _Pan3D.skill.vo.EnumSkillKeyType;
		import _Pan3D.skill.vo.ParamPoint;
		import _Pan3D.skill.vo.ParamTarget;
		import _Pan3D.skill.vo.SkillKeyVo;
		import _Pan3D.skill.vo.SkillTimeLineVo;
		import _Pan3D.skill.vo.effect.EffectSkillVo;
		import _Pan3D.skill.vo.effect.EnumEffectType;
		import _Pan3D.skill.vo.traject.TrajectoryDynamicPointVo;
		import _Pan3D.skill.vo.traject.TrajectoryDynamicTargetVo;
		import _Pan3D.skill.vo.traject.TrajectoryFiexPointVo;
		
		import _me.Scene_data;
		
		import common.AppData;
		
		import modules.expres.ExpResFunVo;
		import modules.expres.ExpResModel;
		import modules.expres.ExpResPanel;
		import modules.hierarchy.h5.ExpH5ByteModel;
		import modules.hierarchy.h5.ExpResourcesModel;
		import modules.hierarchy.h5.MakeResFileList;
		import modules.scene.sceneSave.FilePathManager;
		
		import renderLevel.Display3DMovieLocal;
		
		import utils.ShockUtils;
		import utils.ai.AIManager;
		
		import view.aiRole.AiRolePanel;
		import view.controlCenter.configSkill.ConfigPoint;
		import view.exp.ExpSkillPanle;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		/**
		 * 是否为第一次打开
		 * 
		 * */
		private var isFirst:Boolean = true;
		private static var _instance:ControlCenterPanle;
		/**
		 * 当前操作的技能
		 * 
		 * */
		private var currentTimeline:SkillTimeLineSprite;
		/**
		 * 导出技能面板选项
		 * 
		 * */
		private var expSkillPanle:ExpSkillPanle = new ExpSkillPanle;
		
		/**
		 * 技能列表源
		 * 
		 * */
		[Bindable]
		private var ary:ArrayCollection;
		/**
		 * 可显示的最大技能数
		 * 
		 * */
		private var maxLength:int=2;
		/**
		 * 当前tree的选中条目
		 * */
		private var currentItem:TreeItemRenderer;
		
		/**
		 * 单帧的基本宽度
		 * */
		private var baseW:int = 8;
		
		/**
		 * 播放头
		 * */
		private var playhead:Shape;
		
		/**
		 * 添加Ai角色的面板
		 * */
		private var aiRolePanel:AiRolePanel = new AiRolePanel;
		/**
		 * 配置点的面板
		 * */
		private var configPoint:ConfigPoint = new ConfigPoint;
		/**
		 * 技能播放对象
		 * */
		private var skillTimeLine:SkillTimeLine;
		
		public static function getInstance():ControlCenterPanle{
			if(!_instance){
				_instance = new ControlCenterPanle;
			}
			return _instance;
		}
		/**
		 * 显示
		 * 
		 * */
		public function showUI(container:DisplayObjectContainer):void{
			if(isFirst){
				this.x = 340;
				this.y = 450;
			}
			
			container.addChild(this);
			isFirst = false;
		}
		/**
		 * 初始化显示选项
		 * 
		 * */
		private function inits():void{
			ary = new ArrayCollection;
			
			setFrameNum(500);
			
			timelineUI.mask = maskTimeline;
			initPlayHead();
			
			tree.setStyle("contentBackgroundColor",0x404040);
			
			
			_positionSprite=new PositionSpriteV2()
			
			
			Scene_data.stage.addChild(_positionSprite);
			this.onSize(null)
				
				
		}
		override public function onSize(event:Event= null):void
		{
			super.onSize(event)
			if(_positionSprite){
				_positionSprite.x=this.parent.x;
				_positionSprite.y=this.parent.y-150
			}
			
		}
		
		/**
		 * 向下点击按钮
		 * 
		 * */
		private function down():void{
			tree.verticalScrollPosition ++;
		}
		/**
		 * 列表条目点击
		 * 
		 * */
		private function change():void{
			var arys:ArrayCollection;
			var obj:Object = tree.selectedItem;
			for(var i:int;i<ary.length;i++){
				var tempAry:ArrayCollection = ary[i].children;
				for(var j:int=0;j<tempAry.length;j++){
					if(tempAry[j] == obj){
						arys = tempAry;
						tempAry[j].check = 1;
					}else{
						tempAry[j].check = 0;
					}
				}
			}
			if(arys == null){
				return;
			}
			
			ary.refresh();
			
			AIManager.getInstance().clear();
		}
		/**
		 * 获取当前最大的技能
		 * 
		 * */
		private function getMaxLength():void{
			maxLength = ary.length;
			var arr:Array = tree.openItems as Array;
			for(var i:int;i<arr.length;i++){
				maxLength += arr[i].children.length
			}
			//trace(tree.rowCount)
			vb.maxScrollPosition = maxLength-(tree.rowCount-1);
			if(maxLength>(tree.rowCount-1)){
				vb.visible = true;
			}else{
				vb.visible = false;
			}
			resetTimeLine();
		}
		
		protected function tree_itemOpenHandler(event:TreeEvent):void
		{
			getMaxLength();
		}
		protected function tree_itemCloseHandler(event:TreeEvent):void
		{
			getMaxLength();
		}
		/**
		 * 根据开启/关闭关系重新设置技能条的显示
		 * */
		private function resetTimeLine():void{
			while(timelineUI.numChildren){
				timelineUI.removeChildAt(0);
			}
			var arr:Array = tree.openItems as Array;
			var ypos:int;
			for(var i:int;i<ary.length;i++){
				ypos++;
				if(arr.indexOf(ary[i]) != -1){
					var targetAry:ArrayCollection = ary[i].children;
					for(var j:int=0;j<targetAry.length;j++){
						timelineUI.addChild(targetAry[j].timeline);
						targetAry[j].timeline.y = ypos*20 + 20;
						ypos++;
					}
				}
			}
			
			
		}
		/**
		 * 向上、向下按钮点击
		 * 
		 * */
		private function myscoll():void{
			tree.verticalScrollPosition = vb.scrollPosition;
			timelineUI.y = 10 - tree.verticalScrollPosition * 20;
		}
		/**
		 * 滚轮滚动
		 * 
		 * */
		protected function tree_mouseWheelHandler(event:MouseEvent):void
		{
			if(event.delta < 0){
				if((maxLength-(tree.rowCount-1)) <= tree.verticalScrollPosition){
					return;
				}
				tree.verticalScrollPosition ++;
			}else{
				if(tree.verticalScrollPosition <= 0){
					return;
				}
				tree.verticalScrollPosition --;
			}
			vb.scrollPosition = tree.verticalScrollPosition;
			timelineUI.y = 10 - tree.verticalScrollPosition * 20;
		}
		/**
		 * 配置该面板的大小
		 * 
		 * */
		private function onResizeDown():void{
			stage.addEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
			stage.addEventListener(MouseEvent.MOUSE_UP,onMouseUp);
		}
		private function onMouseMove(event:MouseEvent):void{
			this.height = stage.mouseY - this.y;
			this.width = stage.mouseX - this.x;
			if(this.height < 120){
				this.height = 120;
			}
			if(this.width < 350){
				this.width = 350;
			}
			//draw();
		}
		private function onMouseUp(event:MouseEvent):void{
			stage.removeEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
			stage.removeEventListener(MouseEvent.MOUSE_UP,onMouseUp);
			//draw();
			getMaxLength();
		}
		/**
		 * 配置条目右键选项
		 * 
		 * */
		protected function tree_rightClickHandler(event:MouseEvent):void
		{
			currentItem = (DisplayObject(event.target).parent) as TreeItemRenderer
			var _menuFile:NativeMenu = new NativeMenu();  
			var addType:NativeMenuItem = new NativeMenuItem("创建分类");  
			addType.addEventListener(Event.SELECT,onMenuAddTpye);
			var addItem:NativeMenuItem = new NativeMenuItem("创建组合动作");  
			addItem.addEventListener(Event.SELECT,onMenuAddItem);
			var line:NativeMenuItem = new NativeMenuItem("line",true)
			
			var expItem:NativeMenuItem = new NativeMenuItem("导出技能");  
			expItem.addEventListener(Event.SELECT,onMenuExpItem);
			
			var configItem:NativeMenuItem = new NativeMenuItem("配置技能释放选项");  
			configItem.addEventListener(Event.SELECT,onMenuConfigSkill);
			
			var delItem:NativeMenuItem = new NativeMenuItem("删除");  
			delItem.addEventListener(Event.SELECT,onMenuDelItem);
			
			var renameItem:NativeMenuItem = new NativeMenuItem("重命名");  
			renameItem.addEventListener(Event.SELECT,onMenuRenameItem);
			
				
			if(currentItem){
				if(Object(currentItem.listData).hasChildren){
					addItem.enabled = true;
					expItem.enabled = false;
				}else{
					addItem.enabled = false;
					expItem.enabled = true;
				}
			}else{
				addItem.enabled = false;
				expItem.enabled = false;
			}
			
			_menuFile.items = [addType,line,addItem,expItem,delItem,configItem,renameItem];  
			_menuFile.display(stage,stage.mouseX,stage.mouseY);
			
		}
		/**
		 * 条目点击
		 * 1.重置当前播放的技能
		 * 2.移除所有的技能
		 * 3.读取当前技能条的数据，并且按照技能数据配置技能
		 * */
		protected function tree_clickHandler(event:MouseEvent):void
		{
			if(skillTimeLine)
				skillTimeLine.reset();
			
			var clickItem:TreeItemRenderer = (DisplayObject(event.target).parent) as TreeItemRenderer
			if(!clickItem){
				return;
			}else if(Object(clickItem.listData).hasChildren){
				return;
			}
			currentTimeline = Object(clickItem.listData).item.timeline;
			SkillManager.getInstance().removeAll();
			
			currentTimeline.buildConfig();
			
			getSkill();
			
			AppDataBone.role.skillMode = true;
		}
		
		private function onMenuAddTpye(event:Event):void{
			NamePanel.getInstance().show(this.parent,addType,"添加新的分类");       
		}
		private function onMenuAddItem(event:Event):void{
			NamePanel.getInstance().show(this.parent,addItem,"添加新的组合动作");
		}
		/**
		 * 配置技能选项
		 * 根据当前技能的不同显示不同技能配置选项
		 * */
		private function onMenuConfigSkill(event:Event):void{
			var obj:Object = currentTimeline.getAllInfo();
			
			var skillTimeLineVo:SkillTimeLineVo = new SkillTimeLineVo();
			skillTimeLineVo.setInfo(obj);
			
			if(skillTimeLineVo.infoVec.length == 0){
				Alert.show("技能尚未添加关键帧");
				return;
			}
			
			var skillKeyVo:SkillKeyVo = skillTimeLineVo.infoVec[0];
			
			if(skillKeyVo.type == EnumSkillKeyType.TRAJECTORY){
				if(skillKeyVo is TrajectoryDynamicTargetVo){
					aiRolePanel.show(this.parent,currentTimeline.configSkillData,configSkill);
				}else if(skillKeyVo is TrajectoryDynamicPointVo){
					//configPoint.show(this.parent,currentTimeline.configSkillData,configSkill);
				}
			}else if(skillKeyVo.type == EnumSkillKeyType.EFFECT){
				if(EffectSkillVo(skillKeyVo).effectType == EnumEffectType.DYNAMIC_POINT){
					//configPoint.show(this.parent,currentTimeline.configSkillData,configSkill);
				}
			}
			
			
		}
		/**
		 * 将数据配置到技能条中
		 * 
		 * */
		private function configSkill(data:Object):void{
			currentTimeline.configSkillData = data;
		}
		/**
		 * 清除所有的ai角色
		 * 
		 * */
		public function tree_change():void{
			AIManager.getInstance().clear();
		}
		/**
		 * 技能导出
		 * */
		private function onMenuExpItem(event:Event):void{
			//trace(currentItem.data)
			var objAry:Array = getAllInfo() as Array;
			var resultAry:Array;
			var timeline:Object;
			for(var i:int;i<objAry.length;i++){
				var children:ArrayCollection = objAry[i].children;
				for(var j:int=0;j<children.length;j++){
					if(children[j].name == currentItem.data.name){
						resultAry = children[j].timeline.keyAry;
						timeline = children[j].timeline;
					}
				}
			}
			
			
			var obj:Object = new Object;
			for(var key:String in timeline){
				if(key != "config"){
					obj[key] = timeline[key];
				}
			}
			expSkillPanle.show(this.parent,obj,currentItem.data.name);
		}
		
		private function onMenuDelItem(event:Event):void{
			for(var i:int;i<ary.length;i++){
				if(ary[i] == currentItem.data){
					ary.removeItemAt(i);
					getMaxLength();
					return;
				}
				
				var ary2:ArrayCollection = ary[i].children;
				if(ary2){
					for(var j:int = 0;j<ary2.length;j++){
						if(ary2[j] == currentItem.data){
							ary2.removeItemAt(j);
							getMaxLength();
							return;
						}
					}
				}
			}
			ary.refresh();
		}
		
		private function onMenuRenameItem(event:Event):void{
			NamePanel.getInstance().show(this.parent,renameType,"重命名");
		}
		private function renameType(str:String):void{
			Object(currentItem.listData).item.name = str;
//			if(Object(currentItem.listData).item.children){
//				tree.dataProvider = tree.dataProvider;
//				getMaxLength();
//			}
			ary.refresh();
		}
		/**
		 * 添加类型
		 * */
		private function addType(str:String):void{
			var obj:Object = new Object;
			obj.name = str;
			obj.check = -1;
			obj.children = new ArrayCollection();
			ary.addItemAt(obj,0);
		}
		/**
		 * 添加条目
		 * */
		private function addItem(str:String):void{
			var child:TimelineItemData = new TimelineItemData;
			child.name = str;
			child.check = 0;
			child.timeline = new SkillTimeLineSprite;
			Object(currentItem.listData).item.children.addItem(child);
			resetTimeLine();
		}
		
		protected function tree_itemRollOverHandler(event:ListEvent):void
		{
			//currentItem = event.itemRenderer as TreeItemRenderer;
			//vb.scrollPosition = tree.verticalScrollPosition;
			//timelineUI.y = 10 - tree.verticalScrollPosition * 20;
		}
		
		/**
		 * 设置总帧数 
		 * 绘制相应的面板
		 * */
		public function setFrameNum(num:int):void{

			while(ui.numChildren){
				ui.removeChildAt(0);
			}
			while(graduation.numChildren){
				graduation.removeChildAt(0);
			}
			var bitmapdata:BitmapData = new BitmapData(8*num,1500,false,0xff2a2a2a);
			var bitmapdataBg:BitmapData = new BitmapData(8*num,30,false,0xff2a2a2a);
			var sp1:Shape = new Shape();
			sp1.graphics.beginFill(0x505050,1);
			sp1.graphics.lineStyle(1,0x353535);
			sp1.graphics.drawRect(0,0,baseW,20);
			sp1.graphics.endFill();
			
			var sp2:Shape = new Shape();
			sp2.graphics.beginFill(0x404040,1);
			sp2.graphics.lineStyle(1,0x353535);
			sp2.graphics.drawRect(0,0,baseW,20);
			sp2.graphics.endFill();
			
			var txt:TextField = new TextField();
			txt.width = 25;
			txt.height = 20;
			var ma:Matrix = new Matrix();
			ma.ty = 30;
			var txtma:Matrix = new Matrix();
			txtma.ty = 15;
			for(var j:int=0;j<50;j++){
				for(var i:int=0;i<num;i++){
					if(i%5){
						bitmapdata.draw(sp1,ma);
					}else{
						if(j==0){
							txt.htmlText = "<font size='10' face='Microsoft Yahei' color='#666666'><b>" + i + "</b></font>"
							bitmapdataBg.draw(txt,txtma);
						}
						bitmapdata.draw(sp2,ma);
					}
					ma.tx = i*baseW;
					txtma.tx = i*baseW;
				}
				ma.ty += 20;
			}
			
			txtma.tx = 0;
			txtma.ty = 0;
			ma.tx = 0;
			ma.ty = 12;
			sp1.graphics.clear();
			sp1.graphics.lineStyle(1,0x777777);
			sp1.graphics.moveTo(0,-2);
			sp1.graphics.lineTo(0,7);
			sp1.graphics.moveTo(0,0);
			sp1.graphics.lineTo(50,0);
			
			for(i=0;i<num;i+=6){
				txtma.tx = i*baseW;
				ma.tx = i*baseW;
				txt.htmlText = "<font size='10' face='Microsoft Yahei' color='#666666'><b>" + (i/6*100) + "</b></font>"
				bitmapdataBg.draw(txt,txtma);
				bitmapdataBg.draw(sp1,ma);
				
			}
			
			var bitmap:Bitmap = new Bitmap(bitmapdata);
			ui.addChild(bitmap);
			ui.width = bitmap.width;
			
			bitmap = new Bitmap(bitmapdataBg);
			graduation.addChild(bitmap);
			
			maskTimeline.graphics.clear();
			maskTimeline.graphics.beginFill(0xff0000,0.5);
			maskTimeline.graphics.drawRect(0,0,8*num,1500);
			maskTimeline.graphics.endFill();
		}
		/**
		 * 关闭
		 * */
		private function close():void{
			if(this.parent){
				this.parent.removeChild(this);
			}
			
			
		}
		
		/**
		 * 初始化播放头
		 * */
		private function initPlayHead():void{
			playhead = new Shape();
			playhead.graphics.lineStyle(1,0xCC0000);
			playhead.graphics.beginFill(0xCC0000,0.5);
			playhead.graphics.drawRect(0,0,baseW,20);
			playhead.graphics.endFill();
			playhead.graphics.lineStyle(1,0xCC0000);
			playhead.graphics.moveTo(baseW/2,20);
			playhead.graphics.lineTo(baseW/2,500);
			head.addChild(playhead);
		}
		/**
		 * 按钮点击
		 * */
		private function onKey(event:KeyboardEvent):void{
			if(!currentTimeline){
				return;
			}
			if(event.keyCode == Keyboard.NUMBER_1){
				play();
			}else if(event.keyCode == Keyboard.NUMBER_2){
				preFrame();
			}else if(event.keyCode == Keyboard.NUMBER_3){
				nextFrame();
			}else if(event.keyCode == Keyboard.NUMBER_4){
				stop();
			}
		}
		/**
		 * 播放
		 * */
		public function play():void{
			skillTimeLine.reset();
			
			SkillManager.getInstance().start();
			
			SkillManager.getInstance().removeAll();
			
			SkillManager.getInstance().playSkill(skillTimeLine);
			
			currentTimeline.frame = 0;
			
			AppDataBone.role.play(skillTimeLine.actionName,1);
			
			this.addEventListener(Event.ENTER_FRAME,onPlay);
			
			ShockUtils.stop();
		}
		/**
		 * 上一帧
		 * */
		public function preFrame():void{
			this.removeEventListener(Event.ENTER_FRAME,onPlay);
			var frame:int = currentTimeline.frame;
			frame = frame-1;
			if(frame < 1){
				frame = 1;
			}
			currentTimeline.frame = frame;
			AppDataBone.role.gotoAndStop(frame);
			playhead.x = currentTimeline.frame*8;
		}
		/**
		 * 停止播放
		 * */
		public function stop():void{
			this.removeEventListener(Event.ENTER_FRAME,onPlay);
			
			skillTimeLine.reset();
			
			SkillManager.getInstance().start();
			
			SkillManager.getInstance().removeAll();
			
			currentTimeline.frame = 0;
			
			playhead.x = currentTimeline.frame*8;
		}
		
		/**
		 * 播放更新，核心函数
		 * */
		private function onPlay(event:Event):void{
			SkillManager.getInstance().update();
			currentTimeline.frame ++;
			playhead.x = currentTimeline.frame*8;
		} 
		/**
		 * 下一帧
		 * */
		private function nextFrame():void{
			this.removeEventListener(Event.ENTER_FRAME,onPlay);
//			SkillManager.getInstance().updateByFrame();
			currentTimeline.frame++;
			AppDataBone.role.gotoAndStop(currentTimeline.frame);
			playhead.x = currentTimeline.frame*8;
		}
		/**
		 * 跳帧
		 * */
		private function gotoAndPlay():void{
			if(!currentTimeline){
				return;
			}
			//currentTimeline.reset();
			var frame:int = cav.mouseX/8;
//			ParticleManagerTool.getInstance().gotoAndStop(frame);
//			SkillManager.getInstance().gotoAndStop(frame);
			
			currentTimeline.frame = frame;
			AppDataBone.role.gotoAndStop(frame);
			
			playhead.x = currentTimeline.frame*8;
		}
		
		
		
		protected function addedToStageHandler(event:Event):void
		{
			stage.addEventListener(KeyboardEvent.KEY_DOWN,onKey);
		}
		
		public function expSkill():void{
			var obj:Object = this.getAllInfo();
			if(!obj.length){
				return;
			}
			var $tabelItemStr:Array=["tb_skills#icon,name,id"]
			var directory:File = File.applicationDirectory; 
			var $configFile:File=new File(directory.nativePath+"/config.txt");
			if($configFile.exists){
				var fs:FileStream = new FileStream;
				fs.open($configFile,FileMode.READ);
				var $str:String = fs.readUTFBytes(fs.bytesAvailable)
				fs.close();
				var $item:Object=JSON.parse($str);
				if($item.skill&&$item.skill){
					$tabelItemStr=$item.skill
				}
			}
			if(ExpResModel.expArpg&&true){
				ExpResPanel.initExpPanel(selectBackFun,$tabelItemStr);
			}else{
				var file:File =new File(FilePathManager.getInstance().getPathByUid("expToH5"));
				file.browseForSave("保存文件");
				file.addEventListener(Event.SELECT,selectSkillFile);
			}
	
			
			
		}
		private function selectSkillFile(event:Event):void{
			this.onExpSkillSel(event.target as File);
		}
		private var isUi:Boolean=false
		private function selectBackFun($obj:ExpResFunVo):void
		{
			if(!$obj.id){
				Alert.show("技能配置不正确")
				return 
			}

			isUi=$obj.isUi
			this.onExpSkillSel(new File(AppData.expSpaceUrl+"/"+$obj.id));
		}

		private function onExpSkillSel(file:File):void{

			if(!(file.extension == "txt")){
				file = new File(file.nativePath + ".txt");
			}
			
			var $rootFile:String=file.parent.url + "/"
				
			FilePathManager.getInstance().setPathByUid("expToH5",$rootFile)
				
			ExpResourcesModel.getInstance().initData($rootFile,returnFun)
			
			var obj:Object = this.getAllInfo();
			var ary:ArrayCollection = obj[0].children;
			var resultDic:Object = new Object;
			for(var i:int;i<ary.length;i++){
				var keyObj:Object = ary[i].timeline;
				var type:int = this.getType(keyObj);
				var newObj:Object = getKeyObj(type,keyObj,$rootFile);
				resultDic[ary[i].name] = newObj;
			}
		
			
			var str:String = JSON.stringify(resultDic);
			
			var $skillByte:ByteArray=new ByteArray;
			writeSkillByte($skillByte,resultDic,ary.length)


			ExpResourcesModel.getInstance().run()
			
			function returnFun():void{
			
				//saveSkill(file,str)
				saveByteSkill(file,str,$skillByte,resultDic);

				//MakeResFileList.getInstance().saveFileListToH5($rootFile,"skill",file.name.replace("."+file.extension,""));
				
	

			}
			
		}
		private function writeSkillByte($skillByte:ByteArray,resultDic:Object,len:Number):void
		{
			$skillByte.writeInt(len)
			for (var kstr:String in resultDic){
				var $kobj:Object=resultDic[kstr]
				var $type:Number=$kobj.type
				$skillByte.writeUTF(kstr);
				$skillByte.writeUTF($kobj.action);
				$skillByte.writeFloat($type);
				if($kobj.blood){
					$skillByte.writeInt($kobj.blood);
				}else{
					$skillByte.writeInt(0);
				}
				if($kobj.sound){
					$skillByte.writeInt($kobj.sound.time);
					$skillByte.writeUTF($kobj.sound.name);
				}else{
					$skillByte.writeInt(0);
				}
				
				if($kobj.shock){
					$skillByte.writeInt($kobj.shock.length);
					for(var j:int = 0;j<$kobj.shock.length;j++){
						$skillByte.writeInt($kobj.shock[j].time);
						$skillByte.writeInt($kobj.shock[j].lasttime);
						$skillByte.writeFloat($kobj.shock[j].amp);
					}
				}else{
					$skillByte.writeInt(0);
				}
				
				//$skillByte.writeUTF(JSON.stringify($kobj.data));
				
				var dLen:Number=$kobj.data.length;
				$skillByte.writeInt(dLen)
				for(var i:uint=0;i<dLen;i++)
				{
					trace($kobj.data[i].url)
					$skillByte.writeUTF($kobj.data[i].url)
					$skillByte.writeFloat($kobj.data[i].frame)
				
					switch($type)
					{
						case 1:
						{
							$skillByte.writeInt($kobj.data[i].beginType);
							
							if($kobj.data[i].beginType == 0){
								$skillByte.writeFloat($kobj.data[i].beginPos.x);
								$skillByte.writeFloat($kobj.data[i].beginPos.y);
								$skillByte.writeFloat($kobj.data[i].beginPos.z);
							}else if($kobj.data[i].beginType == 1){
								$skillByte.writeUTF($kobj.data[i].beginSocket);
							}
							
							if($kobj.data[i].hitSocket){
								$skillByte.writeUTF($kobj.data[i].hitSocket);
							}else{
								$skillByte.writeUTF("");
							}
							
							if($kobj.data[i].endParticle){
								$skillByte.writeUTF($kobj.data[i].endParticle);
							}else{
								$skillByte.writeUTF("");
							}
							
							$skillByte.writeInt($kobj.data[i].multype)
							$skillByte.writeFloat($kobj.data[i].speed)
					
			
							
							
							break;
						}
						case 3:
						{
							
	
								
							$skillByte.writeUTF($kobj.data[i].beginSocket)
							$skillByte.writeFloat($kobj.data[i].beginType)
								
							$skillByte.writeFloat($kobj.data[i].multype)
							$skillByte.writeFloat($kobj.data[i].speed)
								

							
							break;
						}
							
							
							
						
							
						case 4:
						{
							if($kobj.data[i].socket){
								$skillByte.writeBoolean(true);
								$skillByte.writeUTF($kobj.data[i].socket);
							}else{
								$skillByte.writeBoolean(false);
								$skillByte.writeFloat($kobj.data[i].pos.x);
								$skillByte.writeFloat($kobj.data[i].pos.y);
								$skillByte.writeFloat($kobj.data[i].pos.z);
								$skillByte.writeFloat($kobj.data[i].pos.w);
								
								$skillByte.writeFloat($kobj.data[i].rotation.x);
								$skillByte.writeFloat($kobj.data[i].rotation.y);
								$skillByte.writeFloat($kobj.data[i].rotation.z);
								$skillByte.writeFloat($kobj.data[i].rotation.w);
							}
							
							break;
						}
							
						case 6:
						{
							trace(1111);
							break;
						}
							
						default:
						{
							
							Alert.show("writeSkillByte")
							break;
						}
					}
					
				
					
				}
				
				
				
				
				
		
			}
		
		}
		private function saveByteSkill(file:File,str:String,$skillByte:ByteArray,resultDic:Object):void
		{
			
			var newUrl:String = file.parent.url + "/skill/" + file.name.replace(".txt","_byte.txt");
			MakeResFileList.getInstance().pushUrl(newUrl)
		
			var $byte:ByteArray=new ByteArray
			var fs:FileStream = new FileStream;
			fs.open( new File(newUrl),FileMode.WRITE);
			this.writeData(fs,file,str,$skillByte,true)
			fs.close();
			
			for(var key:String in resultDic){
				var obj:Object = resultDic[key];
				if(obj.sound){
					var newSoundFile:File = new File(file.parent.url + "/skill/sound/" + obj.sound.name);
					var srcSoundFile:File = new File(Scene_data.fileRoot + obj.sound.url);
					srcSoundFile.copyTo(newSoundFile,true);
				}
			}
		//下面部分是用玩支付小程序导出图片资源
			var $baseFileUrl:String= file.parent.url + "/skill/" + file.name.replace(".txt","_base_byte.txt");
			MakeResFileList.getInstance().pushUrl($baseFileUrl)
			fs.open(new File($baseFileUrl),FileMode.WRITE);
			this.writeData(fs,file,str,$skillByte,false)
			fs.close();
			
			
		}
		private function writeData(fs:FileStream,file:File,str:String,$skillByte:ByteArray,haspic:Boolean):void
		{
			var $byte:ByteArray=new ByteArray;
			$byte.writeInt(Scene_data.version)
			$byte.writeUTF(file.name);
			ExpH5ByteModel.getInstance().WriteByte($byte,haspic,[1,3,4]);
			//$byte.writeUTF(str);
			fs.writeBytes($byte,0,$byte.length);
			fs.writeBytes($skillByte,0,$skillByte.length);
		}

		private function getKeyObj(type:int,keyObj:Object,rootUrl:String):Object{
			
			
			var ary:Array = new Array;
			var infoAry:Array = keyObj.infoAry;
			if(type == 4){
				for(var i:int=0;i<infoAry.length;i++){
					var data:Object = infoAry[i].data;
					var obj:Object = new Object;
					obj.frame = infoAry[i].frameNum;
					
					if(data.typeInfo.socket){
						obj.socket = data.typeInfo.socket;
					}else{
						obj.pos = data.typeInfo.pos;
						obj.rotation = data.typeInfo.rotation;
					}
					
					obj.url = ExpResourcesModel.getInstance().expParticleByUrl(data.particleInfo.particleUrl,rootUrl);
					ary.push(obj);
				}
			}else if(type == 6){
				
			}else if(type == 1){
				for(i=0;i<infoAry.length;i++){
					data = infoAry[i].data;
					obj = new Object;
					obj.frame = infoAry[i].frameNum; 
					obj.beginType = data.beginType;
					if(data.beginType == 1){
						obj.beginSocket = data.beginSocket;
					}else if(data.beginType == 0){
						obj.beginPos = data.beginPos
					}
					
					obj.speed = data.speed;
					obj.url = ExpResourcesModel.getInstance().expParticleByUrl(data.particleInfo.particleUrl,rootUrl);
					
					if(data.typeInfo.hitSocket){
						obj.hitSocket = data.typeInfo.hitSocket
					}
					
					if(data.typeInfo.endParticle){
						obj.endParticle = ExpResourcesModel.getInstance().expParticleByUrl(data.typeInfo.endParticle.particleUrl,rootUrl);
					}
					
					obj.multype = data.multype;
					
					
					ary.push(obj);
				}
			}else if(type == 3){
				for(i=0;i<infoAry.length;i++){
					data = infoAry[i].data;
					obj = new Object;
					obj.frame = infoAry[i].frameNum; 
					obj.beginType = data.beginType;
					if(data.beginType == 1){
						obj.beginSocket = data.beginSocket;
					}else if(data.beginType == 0){
						obj.beginPos = data.beginPos
					}
					
					obj.speed = data.speed;
					obj.url = ExpResourcesModel.getInstance().expParticleByUrl(data.particleInfo.particleUrl,rootUrl);
					
					if(data.typeInfo.endParticle){
						obj.endParticle = ExpResourcesModel.getInstance().expParticleByUrl(data.typeInfo.endParticle.particleUrl,rootUrl);
					}
					
					obj.multype = data.multype;
					
					
					ary.push(obj);
				}
			}
			var resultObj:Object = new Object;
			resultObj.type = type;
			resultObj.data = ary;
			resultObj.action = keyObj.action;
			
			if(keyObj.blood){
				resultObj.blood = int(keyObj.blood.time * Scene_data.frameTime);
			}
			if(keyObj.sound){
				resultObj.sound = keyObj.sound;
				var soundUrl:String = resultObj.sound.url;
				var soundAry:Array = soundUrl.split("/");
				resultObj.sound.name = soundAry[soundAry.length-1];
			}
			if(keyObj.shock && keyObj.shock.length){
				resultObj.shock = keyObj.shock;
			}
			
			return resultObj;
		}
		
		
		private function getType(keyObj:Object):int{
			var type:int;
			if(!keyObj.infoAry.length){
				type = -1;
			}else{
				var typeObj:Object = keyObj.infoAry[0];
				if(typeObj.type == 2){
					if(typeObj.data.type == 0){
						type = 4;
					}else if(typeObj.data.type == 1){
						type = 5;
					}else if(typeObj.data.type == 2){
						type = 6;
					}else{
						type = -1;
					}
				}else if(typeObj.type == 1){
					if(typeObj.data.type == 0){
						type = 1;
					}else if(typeObj.data.type == 1){
						type = 2;
					}else if(typeObj.data.type == 2){
						type = 3;
					}else{
						type = -1;
					}
				}else{
					type = -1;
				}
			}
			return type;
		}
		
		/**
		 * 获取所有数据
		 * */
		public function getAllInfo():Array{
			var obj:Array = new Array;
			for(var i:int;i<ary.length;i++){
				obj.push(copyObj(ary[i]));
			}
			return obj;
		}
		/**
		 * 复制数据
		 * 
		 * */
		public function copyObj(sourceObj:Object):Object{
			var obj:Object = new Object;
			for(var key:String in sourceObj){
				if(sourceObj[key] is ArrayCollection){
					obj[key] = copyChildren(sourceObj[key]);
				}else{
					obj[key] = sourceObj[key];
				}
			}
			return obj;
		}
		/**
		 * 拷贝节点数据
		 * 
		 * */
		public function copyChildren(sourceAry:ArrayCollection):ArrayCollection{
			var arr:ArrayCollection = new ArrayCollection;
			for(var i:int;i<sourceAry.length;i++){
				arr.addItem(sourceAry[i].getAllInfo());
			}
			return arr;
		}
		/**
		 * 装载数据
		 * 
		 * */
		public function setAllInfo(soureAry:Array):void{
			trace(soureAry)
			ary = new ArrayCollection;
			for(var i:int;i<soureAry.length;i++){
				ary.addItem(buildObj(soureAry[i]));
			}
		}
		/**
		 * 清理数据
		 * 
		 * */
		public function clear():void{
			ary = new ArrayCollection;
			
			while(timelineUI.numChildren){
				timelineUI.removeChildAt(0);
			}
			
		}
		/**
		 * 根据装载的数据重建模型
		 * 
		 * */
		public function buildObj(source:Object):Object{
			var obj:Object = new Object;
			for(var key:String in source){
				if(source[key] is ArrayCollection){
					obj[key] = buildChild(source[key]);
				}else{
					obj[key] = source[key];
				}
			}
			return obj;
		}
		/**
		 * 根据装载的数据重建节点
		 * 
		 * */
		public function buildChild(childrenAry:ArrayCollection):ArrayCollection{
			var arr:ArrayCollection = new ArrayCollection;
			for(var i:int;i<childrenAry.length;i++){
				var timelineData:TimelineItemData = new TimelineItemData;
				timelineData.setAllInfo(childrenAry[i]);
				arr.addItem(timelineData);
			}
			return arr;
		}
		
		public var preSetData:Array;
		private var _positionSprite:PositionSpriteV2;
		public function buildByFile():void{
			if(preSetData){
				setAllInfo(preSetData);
			}
		}
		private var _bloodShow:BloodShow;
		private function showBlood($pos:Vector3D):void{
			if(!this._bloodShow){
				this._bloodShow = new BloodShow(this.stage);
			}
			this._bloodShow.show($pos);
			trace("blood");
			//MathCore.math3Dto2Dwolrd(
		}
		/**
		 * 根据当前技能条的数据配合要播放的技能
		 * */
		private function getSkill():void{
			var obj:Object = currentTimeline.getAllInfo();
			
			var skillTimeLineVo:SkillTimeLineVo = new SkillTimeLineVo();
			skillTimeLineVo.setInfo(obj);
			
			skillTimeLine = new SkillTimeLine;
			skillTimeLine.setAllInfo(skillTimeLineVo);
			
			skillTimeLine.bloodFun = this.showBlood;
			
			if(skillTimeLineVo.infoVec.length == 0){
				return;
			}
			
			var skillKeyVo:SkillKeyVo = skillTimeLineVo.infoVec[0];
			
			if(skillKeyVo.type == EnumSkillKeyType.TRAJECTORY){
				if(skillKeyVo is TrajectoryDynamicTargetVo){
					configTarget();
				}else if(skillKeyVo is TrajectoryDynamicPointVo){
					configDynamicPoint();
				}else if(skillKeyVo is TrajectoryFiexPointVo){
					configFixPoint();
				}
			}else if(skillKeyVo.type == EnumSkillKeyType.EFFECT){
				if(EffectSkillVo(skillKeyVo).effectType == EnumEffectType.DYNAMIC_POINT){
					configDynamicEffect();
				}else{
					configFiexEffect();
				}
			}
			
//			var roleList:Vector.<Display3DMovie> = AIManager.getInstance().getRoleList();
//			
//			var paramTargetVec:Vector.<ParamTarget> = new Vector.<ParamTarget>;
//			for(var i:int;i<roleList.length;i++){
//				var paramTaget:ParamTarget = new ParamTarget;
//				paramTaget.target = roleList[i];     
//				paramTaget.timeout = 20 * i;
//				paramTargetVec.push(paramTaget);
//			}
			
//			var paramPointVec:Vector.<ParamPoint> = new Vector.<ParamPoint>;
//			var angle:int;
//			for(var i:int=0;i<6;i++){
//				angle += 15;
//				trace(500*Math.sin(angle/180*Math.PI),500*Math.cos(angle/180*Math.PI))
//				//paramPoint.targetV3d = new Vector3D(200*Math.sin(angle/180*Math.PI),0,200*Math.cos(angle/180*Math.PI));
//			} 
			
			
			//skillTimeLine.configTaget(AppData.role,paramTargetVec);
			
			//skillTimeLine.configFixPoint(AppData.role);
			
			//skillTimeLine.configDynamicPoint(AppData.role,paramPointVec);
			
			//skillTimeLine.configDynamicEffect(paramPointVec);
			
			//skillTimeLine.configFiexEffect(AppData.role);
			
		}
		/**
		 * 配置动态目标弹道
		 * */
		private function configTarget():void{
			var time:Number = currentTimeline.configSkillData.timeOut;
			
			var paramTargetVec:Vector.<ParamTarget> = new Vector.<ParamTarget>;
			var targetRole:Display3DMovieLocal = AIManager.getInstance().getRole();
			if(targetRole){
				var paramTaget:ParamTarget = new ParamTarget;
				paramTaget.target = targetRole;     
				paramTargetVec.push(paramTaget);
			}
			
			skillTimeLine.configTaget(AppDataBone.role,paramTargetVec);
		}
		/**
		 * 配置动态点弹道
		 * */
		private function configDynamicPoint():void{
			var ary:Array = currentTimeline.configSkillData.ary;
			var time:Number = currentTimeline.configSkillData.timeOut;
			var paramPointVec:Vector.<ParamPoint> = new Vector.<ParamPoint>;
			if(!ary){
				return;
			}
			for(var i:int=0;i<ary.length;i++){
				var paramPoint:ParamPoint = new ParamPoint;
				paramPoint.targetV3d = new Vector3D(ary[i].x,ary[i].y,ary[i].z);
				paramPoint.timeout = time * i;
				paramPointVec.push(paramPoint);
			} 
			
			skillTimeLine.configDynamicPoint(AppDataBone.role,paramPointVec);
		}
		/**
		 * 配置固定点弹道
		 * */
		private function configFixPoint():void{
			skillTimeLine.configFixPoint(AppDataBone.role);
		}
		/**
		 * 配置动态点效果
		 * */
		private function configDynamicEffect():void{
			var ary:Array = currentTimeline.configSkillData.ary;
			var time:Number = currentTimeline.configSkillData.timeOut;
			var paramPointVec:Vector.<ParamPoint> = new Vector.<ParamPoint>;
			
			if(ary){
				for(var i:int=0;i<ary.length;i++){
					var paramPoint:ParamPoint = new ParamPoint;
					paramPoint.targetV3d = new Vector3D(ary[i].x,ary[i].y,ary[i].z);
					paramPoint.timeout = time * i;
					paramPointVec.push(paramPoint);
				} 
			}
			
			
			skillTimeLine.configDynamicEffect(paramPointVec);
		}
		/**
		 * 配置静态点效果
		 * */
		private function configFiexEffect():void{
			skillTimeLine.configFiexEffect(AppDataBone.role);
		}
		
		
	]]>
</fx:Script>
	<!--<mx:Panel width="100%" height="100%"/>-->
	
	<mx:Canvas id="cav" left="214" right="2" top="0" bottom="2" verticalScrollPolicy="off" mouseWheel="tree_mouseWheelHandler(event)" >
		<!--<mx:Canvas id="maskCav" x="115" top="30" bottom="11" width="960" backgroundColor="#000000"/>-->
		<mx:UIComponent id="ui"/>
		<mx:UIComponent id="graduation"/>
		<mx:UIComponent id="timelineUI" y="10"/>
		<mx:UIComponent id="maskTimeline" y="30"/>
		<mx:UIComponent id="head" mouseChildren="false" mouseEnabled="false"/>
		<mx:Canvas width="100%" height="30"  click="gotoAndPlay()" backgroundColor="#ffffff" backgroundAlpha="0"/>
	</mx:Canvas>
	
	<mx:Tree id="tree" x="9" top="30" bottom="18" width="206" change="change()" dataProvider="{ary}" verticalScrollPolicy="off" mouseWheel="tree_mouseWheelHandler(event)" 
			 defaultLeafIcon="{null}" itemRenderer="{new ClassFactory(LTreeItemRenderer)}" itemOpen="tree_itemOpenHandler(event)" itemClose="tree_itemCloseHandler(event)"
			 rightClick="tree_rightClickHandler(event)" itemRollOver="tree_itemRollOverHandler(event)" click="tree_clickHandler(event)"
			 labelField="name">
	</mx:Tree>
	<mx:VScrollBar id="vb" right="3" top="62" bottom="18" minScrollPosition="0" scroll="myscoll()" visible="false"/>
	<!--<mx:Label y="5" left="6" right="44" height="26" fontWeight="bold" mouseDown="startDrag()" click="this.parent.setChildIndex(this,this.parent.numChildren-1)"
			  mouseUp="this.stopDrag()" text="动作编辑面板"/>
	<mx:Button right="0" bottom="0" width="8" height="8" mouseDown="onResizeDown()"/>-->
	<!--<mx:Button y="6" right="10" width="28" label="X" click="close()"/>-->
	<!--<mx:Button x="91" y="36" label="配置弹道" click="configTrajectory()"/>-->
</frame:BasePanel>
