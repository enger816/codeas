<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="224" height="264">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import _Pan3D.particle.ctrl.ParticleManager;
		
		import _me.Scene_data;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.ListEvent;
		
		import utils.FileConfigUtils;
		
		import view.particleList.ParticlePanle;
		private static var instance:MeshBindPanle;
		public var info:Object;
		private var file:File;
		private var fun:Function;
		private var _onsure:Boolean;
		private var hasInfo:Boolean;
		private var isFirst:Boolean = true;
		public static function getInstance():MeshBindPanle{
			if(!instance){
				instance = new MeshBindPanle;
			}
			return instance;
		}
		public function show(container:DisplayObjectContainer,_info:Object,fun:Function):void{
			container.addChild(this);
			
			if(isFirst){
				var str:String = FileConfigUtils.readConfig().meshBindPanlePos;
				if(!str){
					this.x = (container.width - this.width)*0.5;
					this.y = (container.height - this.height)*0.5;
				}else{
					var arys:Array = str.split("|");
					this.x = arys[0];
					this.y = arys[1];
				}
			}
			isFirst = false;
			
			if(!_info){
				_info = new Object;
				hasInfo = false;
			}else{
				hasInfo = true;
			}
			this.info = _info;
			this.fun = fun;
			_onsure = false;
			
			if(info.particleNativePath){
				particleLabel.text = info.particleNativePath;
			}else{
				particleLabel.text = null;
			}
			if(info.bindIndex){
				cb.selectedIndex = info.bindIndex;
			}else{
				cb.selectedIndex = 0;
			}
			if(info.particle){
				if(info.particle.bindOffset){
					xTxt.text = info.particle.bindOffset.x;
					yTxt.text = info.particle.bindOffset.y;
					zTxt.text = info.particle.bindOffset.z;
				}else{
					xTxt.text = null;
					yTxt.text = null;
					zTxt.text = null;
				}
				if(info.particle.bindRatation){
					rxTxt.text = info.particle.bindRatation.x;
					ryTxt.text = info.particle.bindRatation.y;
					rzTxt.text = info.particle.bindRatation.z;
				}else{
					rxTxt.text = null;
					ryTxt.text = null;
					rzTxt.text = null;
				}
				
				nonrotation.selected = info.nonrotation;
			}
		}
		private function onParticle():void{
			ParticlePanle.getInstance().show(this.parent,onParticleSelByDB);
			return;
			var fileurl:String = MeshPanel.getInstance().lastParticleUrl;
			if(!fileurl){
				fileurl= FileConfigUtils.readConfig().lyfUrl;
			}
			file = new File(fileurl);
			file.browseForOpen("打开粒子文件",[new FileFilter("lyf","*.lyf")]);
			file.addEventListener(Event.SELECT,onParticleSel);
		}
		
		private function onParticleSelByDB(obj:Object):void{
			file = new File(Scene_data.particleRoot + "lid" + obj.id + ".lyf")
			onParticleSel();
			info.id = obj.id;
			info.name = obj.name;
		}
		
		private function onParticleSel(event:Event=null):void{
			if(info.particle){
				ParticleManager.getInstance().removeParticle(info.particle);
			}
			
			if(file.url.indexOf(Scene_data.particleRoot) == -1){
				Alert.show("非工作空间");
				return;
			}
			info.particleUrl = file.url.substring(Scene_data.particleRoot.length);
			
			info.particleNativePath = file.nativePath;
//			info.particleUrl = file.url;
			info.particleName = file.name;
			info.bindIndex = 0;
			info.visible = true;
			info.bindTarget = AppDataBone.role;
			ParticleManager.getInstance().addParticleByUrl(info.particleUrl,info);
			
			
			MeshPanel.getInstance().lastParticleUrl = file.parent.url;
			FileConfigUtils.writeConfig("lyfUrl",MeshPanel.getInstance().lastParticleUrl);
			particleLabel.text = file.nativePath;
		}
		
		private function getList(ary:ArrayCollection):ArrayCollection{
			var newAry:ArrayCollection = new ArrayCollection;
			
			newAry.addItem({name:'-1'});
			for(var i:int;i<ary.length;i++){
				newAry.addItem(ary[i]);
			}
			
			return newAry;
		}
		
		public function close():void{
			if(this.parent){
				this.parent.removeChild(this);
			}
			if(!_onsure && !hasInfo){
				clean();
			}
		}
		
		protected function changeHandler(event:ListEvent):void
		{
			if(info.particle){
				info.particle.bindIndex = cb.selectedIndex-1;
			}
			info.bindIndex = cb.selectedIndex-1;
		}
		
		public function clean():void{
			if(info.particle){
				ParticleManager.getInstance().removeParticle(info.particle);
			}
			
			//var file:File = event.target as File;
			delete info.particleNativePath;
			delete info.particleUrl;
			delete info.particleName;
			delete info.bindIndex;
			
			particleLabel.text = null;
		}
		
		public function offset():void{
			if(info.particle){
				info.bindOffset = new Vector3D(Number(xTxt.text),Number(yTxt.text),Number(zTxt.text))
				info.particle.bindOffset = info.bindOffset;
			}
		}
		
		public function rotationXY():void{
			if(info.particle){
				if(rxTxt.text == "" && ryTxt.text == "" && rzTxt.text == ""){
					delete info.bindRatation;
					info.particle.bindRatation = null;
				}else{
					info.bindRatation = new Vector3D(Number(rxTxt.text),Number(ryTxt.text),Number(rzTxt.text));
					info.particle.bindRatation = info.bindRatation;
				}
				
			}
		}
		
		public function sure():void{
			if(!info.particle){
				return;
			}
			
			if(nonrotation.selected){
				info.nonrotation = true;
			}else{
				delete info.nonrotation;
			}
			
			_onsure = true;
			fun(info);
			stage.focus = stage;
		}
		
		public function mouseUpDrag():void{
			this.stopDrag();
			FileConfigUtils.writeConfig("meshBindPanlePos",this.x + "|" + this.y);
		}
		
	]]>
</fx:Script>
	<mx:Panel width="100%" height="100%"/>
	<mx:Button x="146" y="45" label="打开" click="onParticle()"/>
	<mx:TextInput id="particleLabel" x="10" y="44" width="128"/>
	<mx:ComboBox id="cb" x="10" y="77" width="204" dataProvider="{getList(AppDataBone.boneList)}" labelField="name" rowCount="15" change="changeHandler(event)"/>
	<mx:Button x="80" y="233" width="60" label="清理" click="clean()"/>
	<mx:Button x="8" y="233" width="60" label="确定" click="sure()"/>
	<mx:Button x="152" y="233" width="60" label="关闭" click="close()"/>
	<mx:TextInput id="xTxt" x="31" y="105" width="43" change="offset()"/>
	<mx:TextInput id="yTxt" x="171" y="105" width="43" change="offset()"/>
	<mx:TextInput id="zTxt" x="102" y="105" width="43" change="offset()"/>
	<mx:Label x="81" y="106" text="y："/>
	<mx:Label x="150" y="106" text="z："/>
	<mx:Label x="10" y="106" text="x："/>
	<mx:Label x="10" y="6" width="204" fontWeight="bold" text="粒子绑定骨骼" mouseDown="startDrag()" mouseUp="mouseUpDrag()"/>
	<mx:TextInput id="rxTxt" x="77" y="134" width="138" change="rotationXY()"/>
	<mx:TextInput id="ryTxt" x="77" y="160" width="138" change="rotationXY()"/>
	<mx:TextInput id="rzTxt" x="77" y="186" width="138" change="rotationXY()"/>
	<mx:Label x="14" y="186" text="y轴旋转"/>
	<mx:Label x="14" y="160" text="y轴旋转"/>
	<mx:Label x="14" y="134" text="x轴旋转"/>
	<mx:CheckBox id="nonrotation" x="12" y="211" label="忽略所有旋转属性"/>
</mx:Canvas>
