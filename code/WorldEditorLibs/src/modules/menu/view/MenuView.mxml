<?xml version="1.0" encoding="utf-8"?>
<mx:Menu xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.zcp.frame.event.ModuleEventManager;
			
			import flash.utils.ByteArray;
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexNativeMenuEvent;
			
			import _Pan3D.display3D.navMesh.NavMeshLevel;
			
			import _me.FpsView;
			
			import common.AppData;
			import common.GameUIInstance;
			import common.msg.event.MEvent_baseShowHidePanel;
			import common.msg.event.collision.MEvent_Collision;
			import common.msg.event.hierarchy.MEvent_Hierarchy;
			import common.msg.event.materials.MEvent_Material;
			import common.msg.event.projectSave.MEvent_ProjectData;
			import common.msg.event.scene.MEvent_Add_Light;
			import common.msg.event.scene.MEvent_Radiosity_To_C;
			import common.msg.event.scene.MEvent_Scene_SaveAs;
			import common.msg.event.scene.MEvent_ShowSceneProp;
			import common.msg.event.scene.Mevent_ExpToH5_Event;
			import common.msg.event.scene.Mevent_Reader_Scene;
			import common.msg.event.terrain.MEvent_Terrain_Exp;
			import common.msg.net.NetManager;
			import common.vo.menu.MenuData;
			
			import manager.LayerManager;
			
			import modules.cradiosity.CradiosityEvent;
			import modules.expres.ExpChangeAllObjsNrmModel;
			import modules.expres.ExpMapPicAndStart;
			import modules.expres.ExpMapPicInfoWindow;
			import modules.expres.ExpResModel;
			import modules.hierarchy.RenderModel;
			import modules.hierarchy.h5.ExpAllSpaceLyfToH5;
			import modules.hierarchy.h5.ExpResourcesModel;
			import modules.hierarchy.radiosity.RadiosityModel;
			import modules.prefabs.PrefabRenderToBmpModel;
			import modules.sceneConfig.SceneConfigEvent;
			import modules.terrain.TerrainOutH5DataModel;
			import modules.terrain.TerrainSmoothModel;
			
			import render.build.BuildManager;
			import render.ground.GroundManager;
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			private var _processor:MenuProcessor;
			
			public function init($processor:MenuProcessor):void{
				_processor = $processor;
			}
			
			public function showMenu():void{
				//GameUIInstance.application.addElement(this);
				GameUIInstance.application.menu = fnm;
				GameUIInstance.stage.addEventListener(KeyboardEvent.KEY_DOWN,onKey);
				
				
			}
			
			protected function itemClickHandler(event:FlexNativeMenuEvent):void
			{
				var type:int = event.item.@id;
				if(type == 0){
					ModuleEventManager.dispatchEvent(new MEvent_ProjectData(MEvent_ProjectData.PROJECT_SAVE));
				}else if(type == 1){
					ModuleEventManager.dispatchEvent(new SceneConfigEvent(SceneConfigEvent.SHOW_SCENE_CONFIG_PANEL));
					//ModuleEventManager.dispatchEvent(new MEvent_ProjectData(MEvent_ProjectData.PROJECT_WORKSPACE_CHANGE));
				}else if(type == 2){
					ModuleEventManager.dispatchEvent(new MEvent_Terrain_Exp(MEvent_Terrain_Exp.TERRAIN_EXP_OBJ)); 
				}else if(type == 3){
					ModuleEventManager.dispatchEvent(new MEvent_Terrain_Exp(MEvent_Terrain_Exp.TERRAIN_EXP_BYTE));
				}else if(type == 4){
					ModuleEventManager.dispatchEvent(new MEvent_Terrain_Exp(MEvent_Terrain_Exp.TERRAIN_EXP_A3D));
				}else if(type == 5){

					ExpAllSpaceLyfToH5.getInstance().outAll()
					
				}else if(type == 6){
					RenderModel.getInstance().isRadiosity=true
					radiosityScene();
				}else if(type == 11){
		
					
				
					ExpMapPicInfoWindow.getInstance().inputFilePanle()
				}else if(type == 12){
					scanFileIcon()
				}else if(type == 13){
					NavMeshLevel.lineSprite.clear()
					ModuleEventManager.dispatchEvent(new MEvent_Collision(MEvent_Collision.SHOW_SCENE_COLLISTION));
				}else if(type == 14){
					ModuleEventManager.dispatchEvent(new MEvent_Radiosity_To_C(MEvent_Radiosity_To_C.MEVENT_RADIOSITY_TO_C));
					
				}else if(type == 15){
					ModuleEventManager.dispatchEvent(new MEvent_Scene_SaveAs(MEvent_Scene_SaveAs.MEVENT_SCENE_SAVEAS));
				}else if(type == 7){
					GroundManager.getInstance().showGroundModelLine();
		
				}else if(type == 20){

					BuildManager.getInstance().showBuildModelLine()
					
				}else if(type == 8){
					LayerManager.getInstance().getAllData();
				}else if(type == 9){
					ModuleEventManager.dispatchEvent( new MEvent_ShowSceneProp(MEvent_baseShowHidePanel.SHOW));
				}else if(type == 16){
					renderCtrl();
					//renderCplusScene();
				}else if(type == 161){
					//renderCtrl();
					renderCplusScene();
				}else if(type == 17){
					ModuleEventManager.dispatchEvent(new CradiosityEvent(CradiosityEvent.SHOW_RADIOSITY_C_PROJECT));
				}else if(type == 18){
					ExpResourcesModel.expAllPic=false
					ModuleEventManager.dispatchEvent(new Mevent_ExpToH5_Event(Mevent_ExpToH5_Event.MEVENT_EXPTOH5_EVENT));
				}else if(type == 19){
	
			
					
					
					Alert.show("是否接触导出贴图合并","警告",Alert.YES | Alert.NO,null,	function onClose(evt:CloseEvent):void
					{
						if(evt.detail == Alert.NO){
							
						}else{
							ModuleEventManager.dispatchEvent(new Mevent_ExpToH5_Event(Mevent_ExpToH5_Event.CANCEL_MERGE_SCENE));
						}
					});
				}else if(type == 20){
					AppData.mainWindow.width = 709;
					AppData.mainWindow.height = 818;
				}else if(type == 21){
					ModuleEventManager.dispatchEvent(new MEvent_Material(MEvent_Material.MEVENT_MATERIAL_JPNG_PANEL));
				}else if(type == 22){
					ModuleEventManager.dispatchEvent(new MEvent_Material(MEvent_Material.MEVENT_MATERIAL_COMBINE_LIGHTMAP));
				}else if(type == 23){
					ExpChangeAllObjsNrmModel.getInstance().changeObjsnrm()
				}else if(type == 24){
		

					ExpResModel.getInstance().changeTbData()
			
					
				}else if(type == 2005){
					TerrainSmoothModel.getInstance().smoothLightPic();
				}
				
				
				
			}
			private function getCdata():void
			{
				ModuleEventManager.dispatchEvent(new MEvent_Hierarchy(MEvent_Hierarchy.GET_SCENE_TO_C_FILE_DATA));
				RadiosityModel.getInstance().addBackInfo();
			}
			
			protected function onKey(event:KeyboardEvent = null):void
			{
				if(event.keyCode == Keyboard.F9){
					RenderModel.getInstance().isRadiosity=true
					radiosityScene()
				}
				if(event.keyCode == Keyboard.F1){
					ModuleEventManager.dispatchEvent( new MEvent_ShowSceneProp(MEvent_baseShowHidePanel.SHOW));
				}
				
			}
			
			public function radiosityScene():void{
				
				var disConnect:Boolean = NetManager.getInstance().connect(function():void{ModuleEventManager.dispatchEvent(new Mevent_Reader_Scene(Mevent_Reader_Scene.MEVENT_READER_SCENE));});
				if(disConnect){
					
				}else{
					ModuleEventManager.dispatchEvent(new Mevent_Reader_Scene(Mevent_Reader_Scene.MEVENT_READER_SCENE));
				}
			}
			
			public function renderCtrl():void{
				var disConnect:Boolean = NetManager.getInstance().connectCtrl(function():void{
					readyRender();
				});
				
				if(!disConnect){
					readyRender();
				}
			}
			
			public function readyRender():void{
				var byte:ByteArray = new ByteArray;
				byte.endian = Endian.LITTLE_ENDIAN;
				byte.writeUTF("begin");
				NetManager.getInstance().sendCtrlMsg(byte,0);
			}
			
			public function renderCplusScene():void{
				
				var disConnect:Boolean = NetManager.getInstance().connect(function():void{
					getCdata();
				},2);
				if(!disConnect){
					getCdata();
				}
			}
			
			public function sendScneToCplusRender(bytes:ByteArray):void{
				NetManager.getInstance().sendMsg(bytes,1);
			}
			
			private function scanFileIcon():void
			{
				needScanIconUrl=new Array
				getSonFile(new File(AppData.workSpaceUrl))
				
				var knum:Number=1;
				
				Alert.show("大约需要"+int(needScanIconUrl.length/(60*knum))+"分"+int(needScanIconUrl.length%60)+"秒","警告",Alert.YES | Alert.NO,null,	function onClose(evt:CloseEvent):void
				{
					if(evt.detail == Alert.NO){
						
					}else{
						if(tokenId){
							clearInterval(tokenId);       
						}
						tokenId = setInterval(scanOneByOne, 1000/knum);   
					}
				});
			}
			private function scanOneByOne():void
			{
				if(needScanIconUrl&&needScanIconUrl.length){
					var url:String=needScanIconUrl.pop();
				
					FpsView.strNotice=String(needScanIconUrl.length)+"=>"+decodeURI(url.replace(AppData.workSpaceUrl,""))
					if(url.search(".objs")>1){
						PrefabRenderToBmpModel.getInstance().scanObjsToBmpByUrl(url)
					}
					if(url.search(".prefab")>1){
						PrefabRenderToBmpModel.getInstance().scanPrefabToBmpByUrl(url)
					}
				}else{
				     Alert.show("扫描缩略图结束")
					 FpsView.strNotice=null
					 clearInterval(tokenId);   
				}
			}
			private var tokenId:uint
			private var needScanIconUrl:Array
			private function getSonFile($disFile:File):void
			{
				if($disFile.isDirectory){
					var arr:Array=$disFile.getDirectoryListing();
					for each(var $file:File in arr){
						if($file.isDirectory){
							getSonFile($file)
						}else{
							if($file.extension=="objs"){
								needScanIconUrl.push($file.url)
							}
							if($file.extension=="prefab"){
								needScanIconUrl.push($file.url)
							}
						}
					}
				}
			}

			
	
			
	
			
		]]>
	</fx:Script>
	<mx:FlexNativeMenu id="fnm" dataProvider="{MenuData.myMenuData}" itemClick="itemClickHandler(event)"
					   labelField="@label" showRoot="false"/>
</mx:Menu>
