<?xml version="1.0" encoding="utf-8"?>
<frame:BaseComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" isDefault="false" creationComplete="basecomponent1_creationCompleteHandler(event)"
					 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:frame="common.utils.frame.*" width="250" height="243" xmlns:img="common.utils.ui.img.*">
<fx:Script>
	<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.core.UIComponent;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		
		import common.utils.ui.file.FileNode;
		
		[Bindable]
		public var ary:ArrayCollection = new ArrayCollection;
		
		protected function list_dragEnterHandler(event:DragEvent):void
		{
			var fileNode:FileNode = event.dragSource.dataForFormat(FileNode.FILE_NODE) as FileNode;
			if(fileNode.extension=="png"||fileNode.extension=="jpg"){
				var ui:UIComponent = event.target as UIComponent;
				DragManager.acceptDragDrop(ui);
			}
		}
		
		protected function list_dragDropHandler(event:DragEvent):void
		{
			var fileNode:FileNode = event.dragSource.dataForFormat(FileNode.FILE_NODE) as FileNode;
			
			
			if(fileNode.extension=="png"||fileNode.extension=="jpg"){
				for(var i:int;i<ary.length;i++){
					if(ary[i] == fileNode.url){
						return;
					}
				}
				
				ary.addItem(fileNode.url);
				this.dispatchEvent(new Event(LOAD_COMPLETE));
			}
		}
		public static const LOAD_COMPLETE:String = "LOAD_COMPLETE";
		
		public function delItem(obj:Object):void{
			for(var i:int;i<ary.length;i++){
				if(ary[i] == obj){
					ary.removeItemAt(i);
					return;
				}
			}
			
		}
		public function pushArr($arr:Array):void
		{
			ary.removeAll()
			for(var i:int;i<$arr.length;i++){
	
				ary.addItem($arr[i]);
			}
			
		}
		public function get selectedIndex():uint
		{

			if(list){
				return list.selectedIndex
			}else{
				return 0
			}
		}
		
		public function replaceImg(baseImg:String,repImg:String):void{
			for(var i:int;i<ary.length;i++){
				if(ary[i] == baseImg){
					ary[i] = repImg;
					break;
				}
			}
			this.dispatchEvent(new Event(LOAD_COMPLETE));
			

		}
		
		protected function basecomponent1_creationCompleteHandler(event:Event):void
		{
			list.dataProvider = ary;
		}
		
	]]>
</fx:Script>
	
	<mx:TileList id="list" x="30" y="5" width="250" height="243" contentBackgroundColor="#666666" 
				 dragEnter="list_dragEnterHandler(event)" dragDrop="list_dragDropHandler(event)" verticalScrollPolicy="off" horizontalScrollPolicy="off"
				 columnWidth="62" maxColumns="4" rowHeight="60">
		<mx:itemRenderer>
			<fx:Component>
				<mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off" rightClick="canvas1_rightClickHandler(event)" dragDrop="list_dragDropHandler(event)" 
						   dragEnter="canvas1_dragEnterHandler(event)" creationComplete="canvas1_creationCompleteHandler(event)">
					<fx:Script>
						<![CDATA[
							import mx.events.FlexEvent;
							import mx.events.DragEvent;
							import mx.managers.DragManager;
							import common.utils.ui.file.FileNode;
							import mx.core.UIComponent;
							
							override public function set data(value:Object):void{
								super.data = value;
								img.fileUrl = String(value);
							}
							private var _menuFile:NativeMenu = new NativeMenu;
							protected function canvas1_rightClickHandler(event:MouseEvent):void
							{
								_menuFile.display(this.stage,stage.mouseX,stage.mouseY);
							}
							
							protected function canvas1_creationCompleteHandler(event:FlexEvent):void
							{
								var item:NativeMenuItem = new NativeMenuItem("删除");
								_menuFile.addItem(item);
								item.addEventListener(Event.SELECT,onSel);
							}
							
							protected function onSel(event:Event):void
							{
								outerDocument.delItem(this.data);
							}
							
							protected function canvas1_dragEnterHandler(event:DragEvent):void
							{
								var fileNode:FileNode = event.dragSource.dataForFormat(FileNode.FILE_NODE) as FileNode;
								if(fileNode.extension=="png"||fileNode.extension=="jpg"){
									var ui:UIComponent = event.target as UIComponent;
									DragManager.acceptDragDrop(ui);
								}
							}
							
							protected function list_dragDropHandler(event:DragEvent):void
							{
								var fileNode:FileNode = event.dragSource.dataForFormat(FileNode.FILE_NODE) as FileNode;

								if(fileNode.extension=="png"||fileNode.extension=="jpg"){
									outerDocument.replaceImg(String(this.data),fileNode.url);
								}
							
							}
							
							
							
						]]>
					</fx:Script>
					<img:FileImage id="img" width="60" height="60"/>
				</mx:Canvas>
			</fx:Component>
		</mx:itemRenderer>
	</mx:TileList>
	
</frame:BaseComponent>
