<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" top="0" bottom="0"
		   xmlns:s="library://ns.adobe.com/flex/spark" backgroundColor="#404040" creationComplete="init()" addedToStage="onStage()"
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- 
			@author liuyanfei QQ:421537900
		
			动态面板类，根据不同的属性生成不同类型的面板 
		-->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import flash.utils.setTimeout;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		
		import _Pan3D.load.LoadInfo;
		import _Pan3D.load.LoadManager;
		import _Pan3D.particle.Display3DParticle;
		import _Pan3D.particle.locus.Display3DLocusPartilce;
		import _Pan3D.particle.locusball.Display3DLocusBallPartilce;
		import _Pan3D.program.Program3DManager;
		import _Pan3D.utils.MaterialManager;
		
		import _me.Scene_data;
		
		import guiji.GuijiLevel;
		
		import renderLevel.quxian.QuxianLevel;
		
		import view.attributeItme.AttColorItem;
		import view.attributeItme.AttComboxItem;
		import view.attributeItme.AttDataItem;
		import view.attributeItme.AttDoubleComboxItem;
		import view.attributeItme.AttFileItem;
		import view.attributeItme.AttPosItem;
		import view.attributeItme.AttScaleItem;
		import view.attributeItme.AttTextInputItem;
		import view.attributeItme.AttTextItem;
		import view.attributeItme.AttXYZWItem;
		import view.materials.MaterialParamView;
		[Bindable]
		private var tfAry:ArrayCollection = new ArrayCollection([false,true]);
		[Bindable]
		private var alphaAry:ArrayCollection = new ArrayCollection([{id:0,label:"Alpha"},{id:1,label:"加法"},{id:2,label:"色彩增殖"},{id:3,label:"滤色"},{id:4,label:"亮度"}]);
		public var type:String;
		private var viewAry:Array;
		public var hasCreat:Boolean;//当前面板是否已经创建完成
		private var _targetShowData:Object;
		private var _defalutAry:Array = new Array;
		/**
		 * 初始化参数
		 * */
		private function init():void{
			viewAry = new Array;
			initConfig();
			hasCreat = true;
		}
		/**
		 * 绘制背景
		 * */
		private function drawBg(num:int):void{
			//var num:int = 21;
			ui.graphics.clear();
			var numHeight:int = 25;
			for(var i:int;i<num;i+=2){
				ui.graphics.lineStyle(1,0x666666);
				if(!(i%2)){
					//ui.graphics.beginFill(0xf7f7f7,1);
				}
				ui.graphics.drawRect(10,i*numHeight,280,numHeight);
				ui.graphics.endFill();
			}
			var maxY:int = 25 * num;
			ui.graphics.moveTo(10,0);
			ui.graphics.lineTo(10,maxY);
			ui.graphics.moveTo(120,0);
			ui.graphics.lineTo(120,maxY);
			ui.graphics.moveTo(290,0);
			ui.graphics.lineTo(290,maxY);
		}
		
		/**
		 * 将粒子的属性信息置入面板显示
		 * @param value 粒子对象
		 */
		public function setData(value:Display3DParticle):void{
			var data:Object = value.getAllInfo();
			
			value.addEventListener("materialComplete",onComplete); 
			
			if(value.materialParam){
				MaterialParamView.getInstance().showMaterial(value.materialParam);
			}
			
			if(!this.hasCreat){
				_targetShowData = data;
				return;
			}else{
				_targetShowData = null; 
			}
			
			for(var i:int;i<viewAry.length;i++){
				var itemdata:Object = viewAry[i].setData;
				for(var key:String in data){
					if(key == itemdata.key){
						viewAry[i].setInfo(data[key])
						break;
					}
				}
			}
			
			value.addEventListener(Event.CHANGE,onChange);
			
		}
		
		
		protected function onComplete(event:Event):void
		{
			var display3d:Display3DParticle = event.target as Display3DParticle;
			MaterialParamView.getInstance().showMaterial(display3d.materialParam);
			
		}
		
		/* public function getPanleData():void{
			
		} */
		/**
		 * 初始化配置信息，加载相应类型的xml数据
		 */
		private function initConfig():void{
			var loaderinfo:LoadInfo = new LoadInfo("assets/config/" + type + ".xml",LoadInfo.XML,onLoad,0,"facet");
			LoadManager.getInstance().addSingleLoad(loaderinfo);
		}
		/**
		 * 面板配置信息
		 */
		private function onLoad(str:String,info:String):void{
			var xml:XML = XML(str);
			var flag:int;
			for each(var prop:XML in xml.item)
			{
				//trace(prop.@name,prop.@value,prop.@type,prop.@key);
				var obj:Object = new Object;
				obj.name = String(prop.@name);//名称
				obj.value = String(prop.@value);//数值
				obj.key = String(prop.@key);//关键key 对应obj的属性
				obj.tip = String(prop.@tip);
				if(prop.hasOwnProperty("@scale")){//缩放比例
					obj.scale = int(prop.@scale);
				}
				/* if(obj.scale == 0){
					obj.scale = 1;
				} */
				_defalutAry.push(obj);
				var type:int = int(prop.@type);
				
				if(type == 1){//文本类型 key-value
					var txt:AttTextItem = new AttTextItem;
					txt.setData = obj;
					txt.y = 25*flag;
					cav.addChild(txt);
					viewAry.push(txt);
				}else if(type == 2){//下拉框 key-combox
					var combox:AttComboxItem = new AttComboxItem;
					combox.setData = obj;
					combox.y = 25*flag;
					cav.addChild(combox);
					viewAry.push(combox);
				}else if(type == 3){//位置类型 key-xyz
					var pos:AttPosItem = new AttPosItem;
					pos.setData = obj;
					pos.y = 25*flag;
					cav.addChild(pos);
					viewAry.push(pos);
				}else if(type == 4){//四数类型 key-xyzw
					var xyzw:AttXYZWItem = new AttXYZWItem;
					xyzw.setData = obj;
					xyzw.y = 25*flag;
					cav.addChild(xyzw);
					viewAry.push(xyzw);
				}else if(type == 5){//文件类型 key-file
					var fileItem:AttFileItem = new AttFileItem;
					fileItem.setData = obj;
					fileItem.y = 25*flag;
					cav.addChild(fileItem);
					viewAry.push(fileItem);
				}else if(type == 6){//颜色选择类型 key-color
					var colorItem:AttColorItem = new AttColorItem;
					colorItem.setData = obj;
					colorItem.y = 25*flag;
					cav.addChild(colorItem);
					viewAry.push(colorItem);
				}else if(type == 7){//数据类型类型 key-data
					var dataItem:AttDataItem = new AttDataItem;
					dataItem.setData = obj;
					dataItem.y = 25*flag;
					cav.addChild(dataItem);
					viewAry.push(dataItem);
				}else if(type == 8){//双选类型 key-doubleCombox
					var doubleCb:AttDoubleComboxItem = new AttDoubleComboxItem;
					doubleCb.setData = obj;
					doubleCb.y = 25*flag;
					cav.addChild(doubleCb);
					viewAry.push(doubleCb);
				}else if(type == 9){//区段缩放类型 key-scale
					var scaleItem:AttScaleItem = new AttScaleItem;
					scaleItem.setData = obj;
					scaleItem.y = 25*flag;
					cav.addChild(scaleItem);
					viewAry.push(scaleItem);
				}else if(type == 10){//材质
					var materialItem:AttFileItem = new AttFileItem;
					materialItem.setData = obj;
					materialItem.y = 25*flag;
					cav.addChild(materialItem);
					viewAry.push(materialItem);
				}if(type == 11){//文本输入类型 key-value
					var txtInput:AttTextInputItem = new AttTextInputItem;
					txtInput.setData = obj;
					txtInput.y = 25*flag;
					cav.addChild(txtInput);
					viewAry.push(txtInput);
				}
				
				flag++;
			}
			drawBg(flag);//根据属性数量画背景
			if(!AppParticleData.display3dParticle.materialUrl){//如果有是打开的东西 则不需要默认的赋值
				setTimeout(getAllInfo,200);
			}else{
				setTimeout(setAllInfo,500);
			}
			AppParticleData.display3dParticle.addEventListener(Event.CHANGE,onChange);
		}
		/**
		 * 如果粒子属性有变化则重新刷新到面板
		 * */
		private function onChange(event:Event):void{
			_targetShowData = Display3DParticle(event.target).getAllInfo()
			setAllInfo();
		}
		/**
		 * 返回所有面板中编辑的信息
		 * */
		public function getAllInfo():void{
			var obj:Object = new Object;
			for(var i:int;i<viewAry.length;i++){
				var itemdata:Object = IAnimItem(viewAry[i]).itemData;
				obj[itemdata.key] = itemdata.value;
			}
			if(obj.life==-1){
				obj.life=5000;
			}
			
			obj.nextLoopTime = obj.totalNum*obj.shootSpeed + obj.shootInterval + obj.life;
			obj.color={begin:new Vector3D(1,1,0.5,1) ,endColor:new Vector3D(0,0,0,-1)};
			
			if(AppParticleData.display3dParticle.particleType == 3){//如果是轨迹模式 则需要将数据刷入轨迹信息
				
				if(obj.isBack==1&&obj.data){
					//这里特殊处理一下，轨迹的播放顺序

					obj.data=obj.data.reverse()
						
					
				}
				if(GuijiLevel.Instance().needUpToView){
					Alert.show("是否重置轨迹","确定",3,null,saveFun);
					function saveFun(evt:CloseEvent):void
					{
						if(evt.detail==Alert.NO){
							//显示面板，将粒子数值刷入面板
							var $display3DLocusPartilce:Display3DLocusPartilce=Display3DLocusPartilce(AppParticleData.display3dParticle)
							var $pointArr:Array=$display3DLocusPartilce.pointArr
							if($display3DLocusPartilce&&$pointArr.length){
								obj.data=$pointArr;
								setData(AppParticleData.display3dParticle);
							}
							AppParticleData.display3dParticle.setAllInfo(obj);
							GuijiLevel.Instance().setGuijiLizhiVO ( Display3DLocusPartilce(AppParticleData.display3dParticle),true);
						}
						if(evt.detail==Alert.YES){
							AppParticleData.display3dParticle.setAllInfo(obj);
							GuijiLevel.Instance().setGuijiLizhiVO ( Display3DLocusPartilce(AppParticleData.display3dParticle),true);
						}
					}
				}else{
					AppParticleData.display3dParticle.setAllInfo(obj);
					GuijiLevel.Instance().setGuijiLizhiVO ( Display3DLocusPartilce(AppParticleData.display3dParticle),true);
				}
				GuijiLevel.Instance().needUpToView=false
			}else if(AppParticleData.display3dParticle.particleType == 14)
			{
				
				if(QuxianLevel.getInstance().needUpToView){
					Alert.show("是否重置轨迹","确定",3,null,saveFun1);
					function saveFun1(evt:CloseEvent):void
					{
						if(evt.detail==Alert.NO){
							//显示面板，将粒子数值刷入面板
							var $display3DLocusPartilce:Display3DLocusBallPartilce=Display3DLocusBallPartilce(AppParticleData.display3dParticle)
							var $pointArr:Array=$display3DLocusPartilce.pointArr
							if($display3DLocusPartilce&&$pointArr.length){
								obj.data=$pointArr;
								setData(AppParticleData.display3dParticle);
							}
							AppParticleData.display3dParticle.setAllInfo(obj);
							QuxianLevel.getInstance().setGuijiLizhiVO ( Display3DLocusBallPartilce(AppParticleData.display3dParticle),true);
						}
						if(evt.detail==Alert.YES){
							AppParticleData.display3dParticle.setAllInfo(obj);
							QuxianLevel.getInstance().setGuijiLizhiVO ( Display3DLocusBallPartilce(AppParticleData.display3dParticle),true);
						}
					}
				}else{
					AppParticleData.display3dParticle.setAllInfo(obj);
					QuxianLevel.getInstance().setGuijiLizhiVO ( Display3DLocusBallPartilce(AppParticleData.display3dParticle),true);
				}
				QuxianLevel.getInstance().needUpToView=false
				
			}else{
				AppParticleData.display3dParticle.setAllInfo(obj);
			}
			
			if(AppParticleData.currentParticleItem){
				AppParticleData.currentParticleItem.reFreshName();
			}
			
		
	
			
		}
		
		/**
		 * 信息置入，将粒子的属性写入面板
		 * */
		public function setAllInfo():void{
			var data:Object = _targetShowData;
			for(var i:int;i<viewAry.length;i++){
				var itemdata:Object = viewAry[i].setData;
				for(var key:String in data){
					if(key == itemdata.key){
						viewAry[i].setInfo(data[key]);
						break;
					}
				}
			}
		}
		/**
		 * 信息的复制，用于复制粒子，将源粒子属性进行深度拷贝，并赋值给新的粒子，然后置入面板
		 * 
		 * */
		public function setDefauleAllInfo():void{
			for(var i:int;i<viewAry.length;i++){
				var itemdata:Object = viewAry[i].setData;
				for(var j:int=0;j<_defalutAry.length;j++){	
					if(_defalutAry[j].key == itemdata.key){
						viewAry[i].setData = copyObj(_defalutAry[j]);
						break;
					}
				}
			}
			getAllInfo();
		}
		/**
		 * 属性的深度拷贝
		 * */
		public function copyObj(source:Object):Object{
			var obj:Object = new Object;
			for(var key:String in source){
				obj[key] = source[key];
			}
			return obj;
		}
		
		public function setDataFromStage():void{
			
		}
		
		public function onStage():void{
			stage.addEventListener(KeyboardEvent.KEY_DOWN,onKey);
		}
		
		private function onKey(e:KeyboardEvent):void{
			if(e.keyCode == 112){
				getAllInfo();
				stage.focus = this;
			}
		}
		
		private function refreshMaterial():void{
			var obj:Object = new Object;
			for(var i:int;i<viewAry.length;i++){
				var itemdata:Object = IAnimItem(viewAry[i]).itemData;
				
				if(itemdata.key == "materialUrl"){
					var url:String = Scene_data.fileRoot + itemdata.value;
					MaterialManager.getInstance().clearCache(url);
					Program3DManager.getInstance().clearCache(url);
					AppParticleData.display3dParticle.setMaterialUrlEnforce(itemdata.value);
				}
				
			}
		}
		
	]]>
</fx:Script>
	<mx:Canvas id="cav" top="0" bottom="40" width="100%" horizontalScrollPolicy="off">
		<mx:UIComponent id="ui" y="0"/>
	</mx:Canvas>	
	<mx:Button right="90" bottom="20" label="刷新材质" click="refreshMaterial()"/>
	<mx:Button right="10" bottom="20" label="刷新(F1)" click="getAllInfo()"/>
</mx:Canvas>
