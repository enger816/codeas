<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="225" height="480" creationComplete="addTostage()" addedToStage="onStage()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import flash.utils.setTimeout;
		
		import _Pan3D.core.MathCore;
		
		import _me.Scene_data;
		import _me.xyzPos.XyzPosData;
		
		import utils.ParticleManagerTool;
		
		import view.ControlCenterView;
		import view.exp.ExpEffectPanle;
		import view.map.MapListPanle;
		
		import xyz.MoveScaleRotationLevel;
		import xyz.base.TooXyzPosData;
		import xyz.draw.TooXyzMoveData;
		
		private static var instance:ConfigPanle;
		private var isFirst:Boolean = true;
		public var baseX:int = 200;
		public var baseY:int = 50; 

		private var _mapRootUrl:String;
		private var _mapListView:MapListPanle;
		private var _expEffectPanle:ExpEffectPanle;
		public static function getInatane():ConfigPanle{
			if(!instance){
				instance = new ConfigPanle;
			}
			return instance;
		}
		public function show(container:DisplayObjectContainer):void{
			if(isFirst){
				this.x = baseX;
				this.y = baseY;
			}
			
			container.addChild(this);
			isFirst = false;
			
			showXYZ();
		}
		public function mouseUpDrag():void{
			this.stopDrag();
		}
		private function close():void{
			if(this.parent){
				this.parent.removeChild(this);
			}
		}
		private function sel2D():void{
			Scene_data.mainScale=2.55
			mainScaText.text="2.55" 
			AppParticleData.is3d = false;
			AppParticleData.isHengban = false;
			posChg();
			Scene_data.focus3D.angle_y = 45;
			Scene_data.focus3D.angle_x = -30;
			txt_changeHandler();
			//var role:Display3dGameMovie = AppData.role;
		}
		
		private function sel3D():void{
			Scene_data.mainScale=2
			mainScaText.text="2"
			AppParticleData.is3d = true;
			AppParticleData.isHengban = false;
			txt_changeHandler();
		}
		
		private function selHengBan():void{
			Scene_data.mainScale=2.55
			mainScaText.text="2.55"
			AppParticleData.is3d = false;
			AppParticleData.isHengban = true;
			posChg();
			Scene_data.focus3D.angle_y = 45;
			Scene_data.focus3D.angle_x = -10;
			txt_changeHandler();
		}
		
		
		
		
		protected function txt_changeHandler(event:Event=null):void
		{
			Scene_data.mainScale = Number(mainScaText.text);
			//math2Ddata();
			if(AppParticleData.role)
				AppParticleData.role.updatePosMatrix();
			
			//ParticleTool(this.parent).refresh();
			ControlCenterView.getInstance().pause();
		}
		
		public function math2Ddata():void
		{
			Scene_data.sw2D=1000*Scene_data.mainScale/Scene_data.stageWidth
			Scene_data.tx2D=-Scene_data.stageWidth/Scene_data.mainScale;
			Scene_data.sinAngle2D=Math.sin(Math.abs(Scene_data.focus3D.angle_x)*Math.PI/180);
			Scene_data.ty2D=Scene_data.stageHeight/Scene_data.mainScale/Scene_data.sinAngle2D
		}
		
		private function antiAlias():void{
			var num:int;
			switch(hs.value)
			{
				case 0:
					num = 0;
					break;
				case 1:
					num = 2;
					break;
				case 2:
					num = 4;
					break;
				case 3:
					num = 16;
					break;
				
			}
			Scene_data.context3D.configureBackBuffer(Scene_data.stageWidth, Scene_data.stageHeight,num, true);
		}
		
		private function loadImg():void{
			var file:File = new File;
			file.browseForOpen("选择背景");
			file.addEventListener(Event.SELECT,onSel);
		}
		
		protected function onSel(event:Event):void
		{
			var url:String = event.target.url;
			AppParticleData.backLevel.backGround.setInfoData(0.990,url);
		}
		
		
		protected function scaleTxt_changeHandler(event:Event):void
		{
			var num:Number = Number(scaleTxt.text);
			if(num == 0){
				num = 0.001;
			}
			ParticleManagerTool.getInstance().setAllScale(num);
		}
		
		protected function showCb_clickHandler(event:MouseEvent):void
		{
			AppParticleData.role.visible = showCb.selected;
		}
		
		public function getScale():Number{
			var num:Number = Number(scaleTxt.text);
			if(num == 0){
				num = 0.001;
			}
			return  num;
		}
		
		public function setScale(value:Number):void{
			scaleTxt.text = String(value);
		}
		
		public function posChg():void{
			//AppData.role.x = Scene_data.stageWidth/2 + int(xpos.text);
			//AppData.role.y = Scene_data.stageHeight/2 + int(ypos.text);
			
			var v3d:Vector3D = MathCore.math2Dto3Dwolrd(-int(xpos.text),-int(ypos.text));
			
			Scene_data.focus3D.x = v3d.x;//int(xpos.text);
			Scene_data.focus3D.y = v3d.y;//int(ypos.text);
			Scene_data.focus3D.z = v3d.z;
			
			
			AppParticleData.posOffsetPoint.x = int(xpos.text);
			AppParticleData.posOffsetPoint.y = int(ypos.text);
			//trace(MathCore.math3Dto2Dwolrd(int(xpos.text),0,int(xpos.text)));
			
		}
		
		private function rootUrl():void{
			if(!_mapListView){
				_mapListView = new MapListPanle;
			}
			this.parent.addChild(_mapListView);
			
			_mapListView.x = (this.parent.width - _mapListView.width)/2;
			_mapListView.y = (this.parent.height - _mapListView.height)/2;
			return;
//			var file:File = new File;
//			file.addEventListener(Event.SELECT,onRootSel);
//			file.browseForDirectory("选择地图文件夹");
		}
		
//		protected function onRootSel(event:Event):void{
//			_mapRootUrl = event.target.url;
//			mapTxt.text = _mapRootUrl;
//		}
//		
//		private function loadMap():void{
//			AppData.backLevel.loadMap(_mapRootUrl,int(wTxt.text),int(hTxt.text));
//			
//		}
		
		private function saveToMap():void{
			var p:Point = new Point;
			p.x = (-AppParticleData.backLevel.x + Scene_data.stageWidth/2 + int(xpos.text))
			p.y = (-AppParticleData.backLevel.y + Scene_data.stageHeight/2 + int(ypos.text));
		
			if(!_expEffectPanle){
				_expEffectPanle = new ExpEffectPanle;
			}
			_expEffectPanle.show(this.parent);
		}
		
		private function addTostage():void{
			setTimeout(begin,2000);
			
			sel3D();
		}
		
		private function onStage():void{
			stage.addEventListener(KeyboardEvent.KEY_DOWN,onKey);
		}
		
		private function begin():void{
			this.addEventListener(Event.ENTER_FRAME,showPos);
			
		}
		private function showPos(e:Event):void{
			var xpos:int = (-AppParticleData.backLevel.x + Scene_data.stageWidth/2 + AppParticleData.posOffsetPoint.x);
			var ypos:int = (-AppParticleData.backLevel.y + Scene_data.stageHeight/2 + AppParticleData.posOffsetPoint.y);
			
			pos.text = xpos + "," + ypos;
		}
		
		private function effectChg():void{
			Scene_data.effectsLev = int(renderLev.selectedValue);
		}
		
		public function onKey(event:KeyboardEvent):void{
			if(event.keyCode == 113){
				shoXYZcb.selected = !shoXYZcb.selected;
				showXYZ();
			}
		}
		
		public function showXYZ():void{
			AppParticleData.showXyz = shoXYZcb.selected;

			showXyzInScene();
		}
		
		public function showXyzInScene():void{
			if(AppParticleData.showXyz){
				
				var tempxyzPosData:XyzPosData=new XyzPosData();
				tempxyzPosData.x=AppParticleData.display3dParticle.center.x;
				tempxyzPosData.y=AppParticleData.display3dParticle.center.y;
				tempxyzPosData.z=AppParticleData.display3dParticle.center.z;
				tempxyzPosData.id=0; 
				var _choosePointItem:Array =new Array
				_choosePointItem.push(tempxyzPosData);
				
				var $xyzPosData:TooXyzMoveData=new TooXyzMoveData
				$xyzPosData.dataItem=new Vector.<TooXyzPosData>;
				$xyzPosData.modelItem=new Array
				
				var k:TooXyzPosData=new TooXyzPosData;
				k.x=AppParticleData.display3dParticle.center.x
				k.y=AppParticleData.display3dParticle.center.y
				k.z=AppParticleData.display3dParticle.center.z
				
				$xyzPosData.dataItem.push(k)
				$xyzPosData.modelItem.push(AppParticleData.display3dParticle)
				
				$xyzPosData.fun=xyzBfun
				MoveScaleRotationLevel.getInstance().xyzMoveData=$xyzPosData
				
			}
		}
		private static function xyzBfun($XyzMoveData:xyz.draw.TooXyzMoveData):void
		{
			for(var i:uint=0;i<$XyzMoveData.modelItem.length;i++){
				
				var $dataPos:TooXyzPosData=$XyzMoveData.dataItem[i]
				AppParticleData.display3dParticle.x = AppParticleData.display3dParticle.center.x = $dataPos.x;
				AppParticleData.display3dParticle.y = AppParticleData.display3dParticle.center.y = $dataPos.y;
				AppParticleData.display3dParticle.z = AppParticleData.display3dParticle.center.z = $dataPos.z;
				AppParticleData.display3dParticle.updataPos();
				AppParticleData.display3dParticle.updateMatrix();
				
				
			}
			
		}
		
		public function watchChg():void{
			var num:int = int(watchPoint.selectedValue)
			if(num == 1){
				Scene_data.focus3D.angle_y = 0;
				Scene_data.focus3D.angle_x = 0;
			}else if(num == 2){
				Scene_data.focus3D.angle_y = 0;
				Scene_data.focus3D.angle_x = 90;
			}else if(num == 3){
				Scene_data.focus3D.angle_y = 90;
				Scene_data.focus3D.angle_x = 0;
			}
			
		}
		
		public function chgSource():void{
			Scene_data.sourceObj = !setSourceObj.selected;
		}
		
	]]>
</fx:Script>
	<mx:Panel width="100%" height="100%"/>
	<mx:RadioButton x="17" y="35" label="3D视角" selected="true" click="sel3D()"/>
	<mx:RadioButton x="120" y="35" label="2.5游戏视角" click="sel2D()"/>
	<mx:RadioButton x="17" y="54" label="横版视角" click="selHengBan()"/>
	<mx:TextInput id="mainScaText" x="17" y="79" width="98" text="2.55" change="txt_changeHandler(event)"/>
	<mx:Button x="121" y="79" label="整体比例调整"/>
	<mx:TextInput id="scaleTxt" x="17" y="109" width="98" text="1" change="scaleTxt_changeHandler(event)"/>
	<mx:Button x="121" y="109" label="粒子比例"/>
	<mx:Button x="18" y="140" width="163" label="添加背景(最大2048)" click="loadImg()"/>
	<mx:HSlider id="hs" x="17" y="192" width="170" maximum="3" minimum="0" snapInterval="1" change="antiAlias()"/>
	<mx:Label x="21" y="173" text="抗锯齿等级"/>
	<mx:Label x="6" y="5" width="164" height="26" mouseDown="startDrag()" mouseUp="mouseUpDrag()" click="this.parent.setChildIndex(this,this.parent.numChildren-1)"
			  text="配置"/>
	<mx:Button x="187" y="5" width="28" label="X" click="close()"/>
	<mx:CheckBox id="showCb" x="19" y="225" label="是否显示角色" click="showCb_clickHandler(event)"
				 selected="true"/>
	<mx:TextInput id="xpos" x="17" y="254" width="96" text="0" change="posChg()"/>
	<mx:Label x="121" y="254" text="x坐标偏移"/>
	<mx:TextInput id="ypos" x="17" y="284" width="96" text="0" change="posChg()"/>
	<mx:Label x="121" y="284" text="y坐标偏移"/>
	<mx:Button x="21" y="317" label="装载地图" click="rootUrl()"/>
	<mx:Button x="116" y="318" label="保存到场景" click="saveToMap()"/>
	<mx:Label id="pos" x="17" y="350" width="170"/>
	
	<mx:CheckBox id="setSourceObj" x="126" y="405" label="导出查看模式" toolTip="如果想查看导出的例子请勾选此选项，制作模式请勿勾选" click="chgSource()"/>
	
	<mx:CheckBox id="shoXYZcb" x="20" y="405" label="显示坐标系(F2)" click="showXYZ()"/>
	
	<mx:RadioButtonGroup id="watchPoint"/>
	<mx:RadioButton left="21" bottom="31" label="主视图" groupName="watchPoint" value="1" click="watchChg()"/>
	<mx:RadioButton left="75" bottom="31" label="俯视图" groupName="watchPoint" value="2"  click="watchChg()"/>
	<mx:RadioButton left="137" bottom="31" label="左视图" groupName="watchPoint" value="3" click="watchChg()"/>
	
	<mx:RadioButtonGroup id="renderLev"/>
	<mx:RadioButton left="21" bottom="10" label="关闭" groupName="renderLev" value="-1" click="effectChg()"/>
	<mx:RadioButton left="75" bottom="10" label="低" groupName="renderLev" value="0"  click="effectChg()"/>
	<mx:RadioButton left="117" bottom="10" label="中" groupName="renderLev" value="1" click="effectChg()"/>
	<mx:RadioButton left="158" bottom="10" label="高" click="effectChg()" groupName="renderLev"
					selected="true" value="2"/>
</mx:Canvas>
