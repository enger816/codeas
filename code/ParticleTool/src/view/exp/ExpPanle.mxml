<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="430" height="240" creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
<fx:Script>
	<![CDATA[
		import com.maclema.mysql.ResultSet;
		
		import mx.controls.Alert;
		
		import _Pan3D.base.ObjData;
		import _Pan3D.display3D.analysis.AnalysisServer;
		
		import _me.Scene_data;
		
		import db.DBManager;
		
		import view.ControlCenterView;
		import view.FileToolBar;
		
		private var _isCreat:Boolean;

		private var sqlId:int;
		
		private var f_version:int;
		/**
		 * 添加or更新模式
		 * 1为添加
		 * 2为更新
		 * */
		private var sqlMode:int;
		
		private var urlStr:String;
		
		private function init():void{
			_isCreat = true;
			
			setData();
		}
		
		public function show(container:DisplayObjectContainer):void{
			if(!AppParticleData.lyfUrl){
				Alert.show("当前文件为空！");
				return;
			}
			container.addChild(this);
			this.x = (container.width - this.width)/2;
			this.y = (container.height - this.height)/2;
			
			if(_isCreat){
				setData()
			}
		}
		/**
		 * 根据当前路径查询数据库中是否已经存在（用于确定是插入或更新）
		 * */
		private function setData():void{
			
			sqlId = -1;
			idTxt.htmlText = "id: ";
			urlStr = AppParticleData.lyfUrl.substr(AppParticleData.particleNativeRoot.length);
			var reg:RegExp = /\\/g;
			urlStr = urlStr.replace(reg,"/");
			urlTxt.htmlText = "路径名称：<font color='#ff0000'>" + urlStr + "</font>";
			
			var sql:String =  "select * from t_avatars_particle where f_name='" + urlStr +"'";
			//var sql:String = "update t_avatars_particle set f_name='hao' where f_id=151";
			DBManager.getInstance().executeQuery(sql,querySuc,error);
		}
		/**
		 * 导出
		 * 
		 * */
		private function exp():void{
			if(!AppParticleData.isAuthorize){
				Alert.show("没有被授权！");
				return;
			}
			
			if(descTxt.text == ""){
				Alert.show("你还没有输入描述");
				descTxt.setFocus();
				return;
			}
			
			var sql:String;
			if(sqlId == -1){
				sql =  "insert into t_avatars_particle (f_name,f_type,f_desc) value('" +urlStr+"' , " + typeTxt.text + ",'" + descTxt.text + "');";
				DBManager.getInstance().executeUpdate(sql,insertSuc,error);
			}else{
				sql = "update t_avatars_particle set f_version='" + (f_version+1) + "' ,f_type=" + typeTxt.text + ",f_desc = '" + descTxt.text + "' where f_id=" + sqlId;
				DBManager.getInstance().executeUpdate(sql,updateSuc,error);
			}
			
			//var sql:String = "update t_avatars_particle set f_name='hao' where f_id=151";
			
		}
		/**
		 * 数据插入成功
		 * 
		 * */ 
		private function insertSuc(obj:Object=null):void{
			trace("insert Suc")
			Alert.show("保存成功!");
			sqlId = obj.insertID;
			onExpSel();
			close();
			if(int(typeTxt.text) == 2){
				var sql:String =  "insert into t_avatars_ui_effect (f_id,f_desc) value(" + sqlId + ",'" + descTxt.text + "');";
				DBManager.getInstance().executeUpdate(sql,sqlUIEffect,error);
			}
		}
		
		private function sqlUIEffect(value:*=null):void{
			trace("更新UI数据成功")
		}
		/**
		 * 错误抛出
		 * 
		 * */ 
		private function error(value:*):void
		{
			trace(value)
		}
		/**
		 * 查询完成（确认模式 添加/修改）
		 * 
		 * */
		private function querySuc(rs:ResultSet):void{
			// TODO Auto Generated method stub
			if(rs.next()){
				sqlId = rs.getInt("F_id");
				f_version = rs.getInt("f_version");
				idTxt.htmlText = "id: <font color='#ff0000'>" + sqlId + "</font>";
				modeTxt.htmlText = "模式: <font color='#ff0000'>修改</font>";
				descTxt.text = rs.getString("f_desc");
			}else{
				modeTxt.htmlText = "模式: <font color='#ff0000'>添加</font>";
				descTxt.text = "";
			}
			//trace(sqlId);
		}
		/**
		 * 数据库记录更新完成
		 * 
		 * */
		private function updateSuc(obj:Object=null):void
		{
			trace("update Suc");
			trace(File.desktopDirectory.url)
			Alert.show("更新成功！");
			onExpSel();
			close();
			if(int(typeTxt.text) == 2){
				var sql:String =  "update t_avatars_ui_effect set f_desc = '" + descTxt.text + "' where f_id=" + sqlId;
				DBManager.getInstance().executeUpdate(sql,sqlUIEffect,error);
			}
		}
		
		private function close():void{
			if(this.parent){
				this.parent.removeChild(this);
			}
		}
		/**
		 * 将相关的资源打包生成到桌面
		 * 
		 * */
		private function onExpSel():void{
			
			var rootUrl:String = File.desktopDirectory.url + "/particles/";
			
			if(AppParticleData.projectType == 3){
				rootUrl = File.desktopDirectory.url + "/fs/particles/";
			}else if(AppParticleData.projectType == 0){
				rootUrl = File.desktopDirectory.url + "/particlesss/";
			}
			
			var file:File = new File(rootUrl + "lid" + sqlId + ".lyf") //= event.target as File;
			var obj:Object = ControlCenterView.getInstance().getAllInfo();// = center.getAllInfo();
			
			var sourceFile:File;
			var ary:Array = obj as Array;
			for(var i:int;i<ary.length;i++){//拷贝到附带的贴图 模型资源到对应的目录
				var p:Object = ary[i].display;
				
				sourceFile = new File(Scene_data.particleRoot + p.textureUrl);
				if(sourceFile.exists){
					if(sourceFile.isDirectory){
						continue;
					}
					//var newFile:File = new File(file.parent.url + "/texture/" + sourceFile.name);
					var newFile:File = new File(rootUrl + "texture/" + sourceFile.name);
					sourceFile.copyTo(newFile,true);
					p.textureUrl = "texture/" + newFile.name;//更改资源的内部指向路径改为相对路径
				}
				
				sourceFile = new File(Scene_data.particleRoot + p.objUrl);
				if(sourceFile.exists){
					if(sourceFile.isDirectory){
						continue;
					}
					//newFile = new File(File.desktopDirectory.url + "/particle/texture/" + sourceFile.name);
					//sourceFile.copyTo(newFile,true);
					
					expByteObj(sourceFile,rootUrl + "texture/" + sourceFile.name);
					
					p.objUrl = "texture/" + sourceFile.name;
				}
				
				sourceFile = new File(Scene_data.particleRoot + p.maskUrl);
				if(sourceFile.exists){
					if(sourceFile.isDirectory){
						continue;
					}
					newFile = new File(rootUrl + "texture/" + sourceFile.name);
					sourceFile.copyTo(newFile,true);
					p.maskUrl = "texture/" + newFile.name;
				}
				
				sourceFile = new File(Scene_data.particleRoot + p.meshUrl);
				var newFileName:String;
				if(sourceFile.exists){
					if(sourceFile.isDirectory){
						continue;
					}
					//newFile = new File(File.desktopDirectory.url + "/particle/bone/" + sourceFile.name);
					//sourceFile.copyTo(newFile,true);
					newFileName = sourceFile.name.split(".")[0] + ".mb";
					new MeshFileToByteUtils().process(sourceFile,rootUrl + "bone/" + newFileName);
					p.meshUrl = "bone/" + newFileName;
				}
				
				sourceFile = new File(Scene_data.particleRoot + p.animUrl);
				if(sourceFile.exists){
					if(sourceFile.isDirectory){
						continue;
					}
//					newFile = new File(File.desktopDirectory.url + "/particle/bone/" + sourceFile.name);
//					sourceFile.copyTo(newFile,true);
					
					newFileName = sourceFile.name.split(".")[0] + ".ab";
					new AnimFileToByteUtils().process(sourceFile,rootUrl + "bone/" + newFileName);
					p.animUrl = "bone/" + newFileName;
				}
				
			}
			
			
			var converObj:Object =  FileToolBar.getInstance().converBitmapPanel.getAllInfo();
			
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.WRITE);
			fs.writeObject(obj);
			if(converObj){
				fs.writeObject(converObj);
			}
			fs.close();
			
		}
		
		
		protected function expByteObj(file:File,outPutUrl:String) : void {
			var fs:FileStream = new FileStream;
			fs.open(file,FileMode.READ);
			var str : String = fs.readUTFBytes(fs.bytesAvailable);
			fs.close();
			
			var _objData:ObjData = AnalysisServer.getInstance().analysisObj(str);
			
			var byte:ByteArray = getByte(_objData);
			
			var newFile:File = new File(outPutUrl);
			fs = new FileStream;
			fs.open(newFile,FileMode.WRITE);
			fs.writeBytes(byte);
			fs.close();
			
		}
		
		public function getByte(objdata:ObjData):ByteArray{
			var byte:ByteArray = new ByteArray;
			
			byte.writeInt(objdata.vertices.length);
			for(var i:int;i<objdata.vertices.length;i++){
				byte.writeFloat(objdata.vertices[i]);
			}
			
			byte.writeInt(objdata.uvs.length);
			for(i=0;i<objdata.uvs.length;i++){
				byte.writeFloat(objdata.uvs[i]);
			}
			
			byte.writeInt(objdata.indexs.length);
			for(i=0;i<objdata.indexs.length;i++){
				byte.writeInt(objdata.indexs[i]);
			}
			
			return byte;
		}
		
	]]>
</fx:Script>
	<mx:Panel width="100%" height="100%" title="导出选项">
	</mx:Panel>
	<mx:Label x="20" y="40" width="400" text="路径名称：///" id="urlTxt"/>
	<mx:Label x="20" y="69" width="249" text="模式：添加/修改" id="modeTxt"/>
	<mx:Label x="20" y="98" width="249" text="id：" id="idTxt"/>
	
	<mx:TextInput id="descTxt" x="87" y="124" width="317"/>
	<mx:Label  x="20" y="124" text="说明注释："/>
	<mx:Button x="20" y="202" width="156" label="导出" click="exp()"/>
	<mx:Button x="195" y="202" width="94" label="关闭" click="close()"/>
	
	<mx:TextInput id="typeTxt" x="87" y="159" width="125"/>
	<mx:Label x="20" y="159" width="59" text="类型："/>
	<mx:Label x="219" y="159" width="185" text="场景 1,ui 2,技能 3,,装备 4"/>
	
</mx:Canvas>
